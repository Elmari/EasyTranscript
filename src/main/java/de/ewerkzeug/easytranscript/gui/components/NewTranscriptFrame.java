/*
 * Copyright (C) 2014 e-werkzeug <administrator@e-werkzeug.eu>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package de.ewerkzeug.easytranscript.gui.components;

import static de.ewerkzeug.easytranscript.core.Easytranscript.formate;
import de.ewerkzeug.easytranscript.core.Variables;
import static de.ewerkzeug.easytranscript.core.Variables.PPprojNameWarning;
import static de.ewerkzeug.easytranscript.core.Variables.PPtransNameWarning;
import static de.ewerkzeug.easytranscript.core.Variables.currentLocale;
import static de.ewerkzeug.easytranscript.core.Variables.messages;
import static de.ewerkzeug.easytranscript.core.Variables.newProjectFrame;
import static de.ewerkzeug.easytranscript.core.Variables.opFolder;
import de.ewerkzeug.easytranscript.IO.data.TranscriptHandler;
import static de.ewerkzeug.easytranscript.IO.data.TranscriptHandler.TransConfTmp;
import static de.ewerkzeug.easytranscript.IO.data.TranscriptHandler.mediaPath;
import static de.ewerkzeug.easytranscript.IO.data.TranscriptHandler.transcriptPath;
import de.ewerkzeug.easytranscript.tools.Tools;
import static de.ewerkzeug.easytranscript.tools.Tools.isStringSafe;
import java.io.File;
import java.util.Arrays;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import uk.co.caprica.vlcj.version.LibVlcVersion;
import uk.co.caprica.vlcj.version.Version;

/**
 *
 * @author e-werkzeug <administrator@e-werkzeug.eu>
 */
public class NewTranscriptFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewProjectFrame
     */
    public NewTranscriptFrame() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NPtransButtongroup = new javax.swing.ButtonGroup();
        NPprojButtongroup = new javax.swing.ButtonGroup();
        NPMainTabbedPane = new javax.swing.JTabbedPane();
        NPprojectPanel = new javax.swing.JPanel();
        NPprojProgrammVerwRadiobutton = new javax.swing.JRadioButton();
        NPprojSpeicherortSelbstRadiobutton = new javax.swing.JRadioButton();
        NPprojSpeicherortTextfield = new javax.swing.JTextField();
        NPprojSpeicherortButton = new javax.swing.JButton();
        NPprojProgrammTextfield = new javax.swing.JTextField();
        NPprojNameLabel = new javax.swing.JLabel();
        NPprojWarningLabel = new javax.swing.JLabel();
        NPprojTitleLabel = new javax.swing.JLabel();
        NPprojPreferredLabel = new javax.swing.JLabel();
        NPtranscriptPanel = new javax.swing.JPanel();
        NPtransCreateRadiobutton = new javax.swing.JRadioButton();
        NPtransCreateTextfield = new javax.swing.JTextField();
        NPtransReadRadiobutton = new javax.swing.JRadioButton();
        NPtransReadTextfield = new javax.swing.JTextField();
        NPtransReadButton = new javax.swing.JButton();
        NPtransCreateLabel = new javax.swing.JLabel();
        NPtransWarning1Label = new javax.swing.JLabel();
        NPtranscopyTrtoProjCheckbox = new javax.swing.JCheckBox();
        NPtransTitleLabel = new javax.swing.JLabel();
        NPmediumPanel = new javax.swing.JPanel();
        NPmediumPathTextfield = new javax.swing.JTextField();
        NPmediumChooseButton = new javax.swing.JButton();
        NPmediumPathLabel = new javax.swing.JLabel();
        NPmediumCopyMedtoProjCheckbox = new javax.swing.JCheckBox();
        NPmediumTitleLabel = new javax.swing.JLabel();
        NPmiscPanel = new javax.swing.JPanel();
        NPmiscArbeitszeitCheckbox = new javax.swing.JCheckBox();
        NPmiscTitle = new javax.swing.JLabel();
        NPconclusionPanel = new javax.swing.JPanel();
        NPconclusionTitleLabel = new javax.swing.JLabel();
        NPconclusionScrollpane = new javax.swing.JScrollPane();
        NPconclusionInfoTextfield = new javax.swing.JTextArea();
        NPButtonPanel = new javax.swing.JPanel();
        NPbuttonCancelButton = new javax.swing.JButton();
        NPbuttonBackButton = new javax.swing.JButton();
        NPbuttonNextButton = new javax.swing.JButton();
        NPbuttonFinishButton = new javax.swing.JButton();
        NPprojHelpButton = new javax.swing.JButton();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Bundle"); // NOI18N
        setTitle(bundle.getString("Easytranscript.MaincreateProjectMenuItem.text")); // NOI18N
        setResizable(false);

        NPMainTabbedPane.setMinimumSize(new java.awt.Dimension(720, 450));
        NPMainTabbedPane.setPreferredSize(new java.awt.Dimension(720, 450));
        NPMainTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                NPMainTabbedPaneStateChanged(evt);
            }
        });

        NPprojButtongroup.add(NPprojProgrammVerwRadiobutton);
        NPprojProgrammVerwRadiobutton.setSelected(true);
        NPprojProgrammVerwRadiobutton.setText(bundle.getString("Easytranscript.NPprojProgrammVerwRadiobutton.text")); // NOI18N
        NPprojProgrammVerwRadiobutton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                NPprojProgrammVerwRadiobuttonStateChanged(evt);
            }
        });

        NPprojButtongroup.add(NPprojSpeicherortSelbstRadiobutton);
        NPprojSpeicherortSelbstRadiobutton.setText(bundle.getString("Easytranscript.NPprojSpeicherortSelbstRadiobutton.text")); // NOI18N
        NPprojSpeicherortSelbstRadiobutton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                NPprojSpeicherortSelbstRadiobuttonStateChanged(evt);
            }
        });

        NPprojSpeicherortTextfield.setEditable(false);
        NPprojSpeicherortTextfield.setToolTipText(bundle.getString("Easytranscript.NPprojSpeicherortTextfield.toolTipText")); // NOI18N

        NPprojSpeicherortButton.setText(bundle.getString("Easytranscript.NPprojSpeicherortButton.text")); // NOI18N
        NPprojSpeicherortButton.setEnabled(false);
        NPprojSpeicherortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NPprojSpeicherortButtonActionPerformed(evt);
            }
        });

        NPprojProgrammTextfield.setToolTipText(bundle.getString("Easytranscript.NPprojProgrammTextfield.toolTipText")); // NOI18N

        NPprojNameLabel.setText(bundle.getString("Easytranscript.NPprojNameLabel.text")); // NOI18N

        NPprojWarningLabel.setForeground(new java.awt.Color(255, 0, 0));

        NPprojTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        NPprojTitleLabel.setText(bundle.getString("Easytranscript.NPprojTitleLabel.text")); // NOI18N

        NPprojPreferredLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        NPprojPreferredLabel.setText(bundle.getString("Easytranscript.NPprojPreferredLabel.text")); // NOI18N

        javax.swing.GroupLayout NPprojectPanelLayout = new javax.swing.GroupLayout(NPprojectPanel);
        NPprojectPanel.setLayout(NPprojectPanelLayout);
        NPprojectPanelLayout.setHorizontalGroup(
            NPprojectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NPprojectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NPprojectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NPprojectPanelLayout.createSequentialGroup()
                        .addComponent(NPprojTitleLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NPprojectPanelLayout.createSequentialGroup()
                        .addGroup(NPprojectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, NPprojectPanelLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(NPprojectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(NPprojectPanelLayout.createSequentialGroup()
                                        .addComponent(NPprojWarningLabel)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(NPprojSpeicherortTextfield)
                                    .addComponent(NPprojProgrammTextfield)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, NPprojectPanelLayout.createSequentialGroup()
                                .addGroup(NPprojectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, NPprojectPanelLayout.createSequentialGroup()
                                        .addComponent(NPprojProgrammVerwRadiobutton)
                                        .addGap(18, 18, 18)
                                        .addComponent(NPprojPreferredLabel))
                                    .addComponent(NPprojSpeicherortSelbstRadiobutton, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 35, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(NPprojectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NPprojSpeicherortButton)
                            .addComponent(NPprojNameLabel))
                        .addGap(213, 213, 213))))
        );
        NPprojectPanelLayout.setVerticalGroup(
            NPprojectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NPprojectPanelLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(NPprojTitleLabel)
                .addGap(33, 33, 33)
                .addGroup(NPprojectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NPprojProgrammVerwRadiobutton)
                    .addComponent(NPprojPreferredLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(NPprojectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NPprojProgrammTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NPprojNameLabel))
                .addGap(18, 18, 18)
                .addComponent(NPprojSpeicherortSelbstRadiobutton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(NPprojectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NPprojSpeicherortTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NPprojSpeicherortButton))
                .addGap(18, 18, 18)
                .addComponent(NPprojWarningLabel)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        NPprojProgrammTextfield.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {

            }

            public void removeUpdate(DocumentEvent e) {
                check();
            }

            public void insertUpdate(DocumentEvent e) {
                check();
            }

            private void check(){
                boolean check = isStringSafe(NPprojProgrammTextfield.getText());
                if (check){
                    NPprojWarningLabel.setText("");
                    PPprojNameWarning=false;
                }else{
                    NPprojWarningLabel.setText("Warnung: Der Name enthält ungültige Zeichen");
                    PPprojNameWarning=true;
                }
            }

        });

        NPMainTabbedPane.addTab(bundle.getString("Easytranscript.NPprojectPanel.TabConstraints.tabTitle"), NPprojectPanel); // NOI18N

        NPtransButtongroup.add(NPtransCreateRadiobutton);
        NPtransCreateRadiobutton.setSelected(true);
        NPtransCreateRadiobutton.setText(bundle.getString("Easytranscript.NPtransCreateRadiobutton.text")); // NOI18N
        NPtransCreateRadiobutton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                NPtransCreateRadiobuttonStateChanged(evt);
            }
        });

        NPtransCreateTextfield.setToolTipText(bundle.getString("Easytranscript.NPtransCreateTextfield.toolTipText")); // NOI18N

        NPtransButtongroup.add(NPtransReadRadiobutton);
        NPtransReadRadiobutton.setText(bundle.getString("Easytranscript.NPtransReadRadiobutton.text")); // NOI18N
        NPtransReadRadiobutton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                NPtransReadRadiobuttonStateChanged(evt);
            }
        });

        NPtransReadTextfield.setEditable(false);
        NPtransReadTextfield.setToolTipText(bundle.getString("Easytranscript.NPtransReadTextfield.toolTipText")); // NOI18N

        NPtransReadButton.setText(bundle.getString("Easytranscript.NPtransReadButton.text")); // NOI18N
        NPtransReadButton.setEnabled(false);
        NPtransReadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NPtransReadButtonActionPerformed(evt);
            }
        });

        NPtransCreateLabel.setText(bundle.getString("Easytranscript.NPtransCreateLabel.text")); // NOI18N

        NPtransWarning1Label.setForeground(new java.awt.Color(255, 0, 0));

        NPtranscopyTrtoProjCheckbox.setText(bundle.getString("Easytranscript.NPtranscopyTrtoProjCheckbox.text")); // NOI18N
        NPtranscopyTrtoProjCheckbox.setToolTipText(bundle.getString("Easytranscript.NPtranscopyTrtoProjCheckbox.toolTipText")); // NOI18N
        NPtranscopyTrtoProjCheckbox.setEnabled(false);

        NPtransTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        NPtransTitleLabel.setText(bundle.getString("Easytranscript.NPtransTitleLabel.text")); // NOI18N

        javax.swing.GroupLayout NPtranscriptPanelLayout = new javax.swing.GroupLayout(NPtranscriptPanel);
        NPtranscriptPanel.setLayout(NPtranscriptPanelLayout);
        NPtranscriptPanelLayout.setHorizontalGroup(
            NPtranscriptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NPtranscriptPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NPtranscriptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NPtransReadRadiobutton)
                    .addComponent(NPtransCreateRadiobutton)
                    .addGroup(NPtranscriptPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(NPtranscriptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(NPtranscriptPanelLayout.createSequentialGroup()
                                .addComponent(NPtransReadTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NPtransReadButton))
                            .addGroup(NPtranscriptPanelLayout.createSequentialGroup()
                                .addComponent(NPtransWarning1Label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(NPtranscopyTrtoProjCheckbox))
                            .addGroup(NPtranscriptPanelLayout.createSequentialGroup()
                                .addComponent(NPtransCreateTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NPtransCreateLabel))))
                    .addComponent(NPtransTitleLabel))
                .addContainerGap(174, Short.MAX_VALUE))
        );
        NPtranscriptPanelLayout.setVerticalGroup(
            NPtranscriptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NPtranscriptPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(NPtransTitleLabel)
                .addGap(33, 33, 33)
                .addComponent(NPtransCreateRadiobutton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(NPtranscriptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NPtransCreateTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NPtransCreateLabel))
                .addGap(18, 18, 18)
                .addComponent(NPtransReadRadiobutton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(NPtranscriptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NPtransReadTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NPtransReadButton))
                .addGroup(NPtranscriptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NPtranscriptPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(NPtransWarning1Label))
                    .addGroup(NPtranscriptPanelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(NPtranscopyTrtoProjCheckbox)))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        NPtransCreateTextfield.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {

            }

            public void removeUpdate(DocumentEvent e) {

                check();
            }
            public void insertUpdate(DocumentEvent e) {

                check();
            }

            private void check(){
                boolean check = isStringSafe(NPtransCreateTextfield.getText());
                if (check){
                    NPtransWarning1Label.setText("");
                    PPtransNameWarning=false;
                }else{
                    NPtransWarning1Label.setText("Warnung: Der Name enthält ungültige Zeichen");
                    PPtransNameWarning=true;
                }
            }

        });
        NPtransReadTextfield.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {

                if (!NPtransReadTextfield.getText().equals("")){
                    TransConfTmp.setProperty("transcriptPath", NPtransReadTextfield.getText());
                }
                else{
                    TransConfTmp.setProperty("transcriptPath", "");
                }
            }
            public void removeUpdate(DocumentEvent e) {

                if (!NPtransReadTextfield.getText().equals("")){
                    TransConfTmp.setProperty("transcriptPath", NPtransReadTextfield.getText());
                }
                else{
                    TransConfTmp.setProperty("transcriptPath", "");
                }
            }
            public void insertUpdate(DocumentEvent e) {

                if (!NPtransReadTextfield.getText().equals("")){
                    TransConfTmp.setProperty("transcriptPath", NPtransReadTextfield.getText());
                }
                else{
                    TransConfTmp.setProperty("transcriptPath", "");
                }
            }
        });

        NPMainTabbedPane.addTab(bundle.getString("Easytranscript.NPtranscriptPanel.TabConstraints.tabTitle"), NPtranscriptPanel); // NOI18N

        NPmediumPanel.setMinimumSize(new java.awt.Dimension(775, 350));

        NPmediumPathTextfield.setToolTipText(bundle.getString("Easytranscript.NPmediumPathTextfield.toolTipText")); // NOI18N

        NPmediumChooseButton.setText(bundle.getString("Easytranscript.NPmediumChooseButton.text")); // NOI18N
        NPmediumChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NPmediumChooseButtonActionPerformed(evt);
            }
        });

        NPmediumPathLabel.setText(bundle.getString("Easytranscript.NPmediumPathLabel.text")); // NOI18N

        NPmediumCopyMedtoProjCheckbox.setText(bundle.getString("Easytranscript.NPmediumCopyMedtoProjCheckbox.text")); // NOI18N
        NPmediumCopyMedtoProjCheckbox.setToolTipText(bundle.getString("Easytranscript.NPmediumCopyMedtoProjCheckbox.toolTipText")); // NOI18N

        NPmediumTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        NPmediumTitleLabel.setText(bundle.getString("Easytranscript.NPmediumTitleLabel.text")); // NOI18N

        javax.swing.GroupLayout NPmediumPanelLayout = new javax.swing.GroupLayout(NPmediumPanel);
        NPmediumPanel.setLayout(NPmediumPanelLayout);
        NPmediumPanelLayout.setHorizontalGroup(
            NPmediumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NPmediumPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NPmediumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NPmediumPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(NPmediumCopyMedtoProjCheckbox))
                    .addGroup(NPmediumPanelLayout.createSequentialGroup()
                        .addComponent(NPmediumPathTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NPmediumChooseButton))
                    .addComponent(NPmediumPathLabel)
                    .addComponent(NPmediumTitleLabel))
                .addContainerGap(279, Short.MAX_VALUE))
        );
        NPmediumPanelLayout.setVerticalGroup(
            NPmediumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NPmediumPanelLayout.createSequentialGroup()
                .addContainerGap(71, Short.MAX_VALUE)
                .addComponent(NPmediumTitleLabel)
                .addGap(30, 30, 30)
                .addComponent(NPmediumPathLabel)
                .addGap(18, 18, 18)
                .addGroup(NPmediumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NPmediumPathTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NPmediumChooseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(NPmediumCopyMedtoProjCheckbox)
                .addGap(123, 123, 123))
        );

        NPmediumPathTextfield.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                if (!NPmediumPathTextfield.getText().equals("")){

                    TransConfTmp.setProperty("mediaPath", NPmediumPathTextfield.getText().replace("https", "http"));
                }
                else{
                    TransConfTmp.setProperty("mediaPath", "");
                }
            }
            public void removeUpdate(DocumentEvent e) {
                if (!NPmediumPathTextfield.getText().equals("")){
                    NPmediumCopyMedtoProjCheckbox.setEnabled(!NPmediumPathTextfield.getText().contains("youtube.com/"));

                    TransConfTmp.setProperty("mediaPath", NPmediumPathTextfield.getText().replace("https", "http"));
                }
                else{
                    TransConfTmp.setProperty("mediaPath", "");
                }
            }
            public void insertUpdate(DocumentEvent e) {
                if (!NPmediumPathTextfield.getText().equals("")){

                    NPmediumCopyMedtoProjCheckbox.setEnabled(!NPmediumPathTextfield.getText().contains("youtube.com/"));

                    TransConfTmp.setProperty("mediaPath", NPmediumPathTextfield.getText().replace("https", "http"));
                }
                else{
                    TransConfTmp.setProperty("mediaPath", "");
                }
            }
        });

        NPMainTabbedPane.addTab(bundle.getString("Easytranscript.NPmediumPanel.TabConstraints.tabTitle"), NPmediumPanel); // NOI18N

        NPmiscArbeitszeitCheckbox.setText(bundle.getString("Easytranscript.NPmiscArbeitszeitCheckbox.text")); // NOI18N
        NPmiscArbeitszeitCheckbox.setToolTipText(bundle.getString("Easytranscript.NPmiscArbeitszeitCheckbox.toolTipText")); // NOI18N

        NPmiscTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        NPmiscTitle.setText(bundle.getString("Easytranscript.NPmiscTitle.text")); // NOI18N

        javax.swing.GroupLayout NPmiscPanelLayout = new javax.swing.GroupLayout(NPmiscPanel);
        NPmiscPanel.setLayout(NPmiscPanelLayout);
        NPmiscPanelLayout.setHorizontalGroup(
            NPmiscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NPmiscPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NPmiscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NPmiscArbeitszeitCheckbox)
                    .addComponent(NPmiscTitle))
                .addContainerGap(482, Short.MAX_VALUE))
        );
        NPmiscPanelLayout.setVerticalGroup(
            NPmiscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NPmiscPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(NPmiscTitle)
                .addGap(66, 66, 66)
                .addComponent(NPmiscArbeitszeitCheckbox)
                .addContainerGap(160, Short.MAX_VALUE))
        );

        NPMainTabbedPane.addTab(bundle.getString("Easytranscript.NPmiscPanel.TabConstraints.tabTitle"), NPmiscPanel); // NOI18N

        NPconclusionTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        NPconclusionTitleLabel.setText(bundle.getString("Easytranscript.NPconclusionTitleLabel.text")); // NOI18N

        NPconclusionInfoTextfield.setEditable(false);
      //  NPconclusionInfoTextfield.setBackground(new java.awt.Color(240, 240, 240));
        NPconclusionInfoTextfield.setColumns(20);
        NPconclusionInfoTextfield.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        NPconclusionInfoTextfield.setLineWrap(true);
        NPconclusionInfoTextfield.setRows(5);
        NPconclusionInfoTextfield.setText(bundle.getString("Easytranscript.NPconclusionInfoTextfield.text")); // NOI18N
        NPconclusionInfoTextfield.setWrapStyleWord(true);
        NPconclusionInfoTextfield.setBorder(null);
        NPconclusionScrollpane.setViewportView(NPconclusionInfoTextfield);

        javax.swing.GroupLayout NPconclusionPanelLayout = new javax.swing.GroupLayout(NPconclusionPanel);
        NPconclusionPanel.setLayout(NPconclusionPanelLayout);
        NPconclusionPanelLayout.setHorizontalGroup(
            NPconclusionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NPconclusionPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(NPconclusionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NPconclusionTitleLabel)
                    .addComponent(NPconclusionScrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        NPconclusionPanelLayout.setVerticalGroup(
            NPconclusionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NPconclusionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NPconclusionTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NPconclusionScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addGap(37, 37, 37))
        );

        NPMainTabbedPane.addTab(bundle.getString("Easytranscript.NPconclusionTitleLabel.text"), NPconclusionPanel); // NOI18N

        NPbuttonCancelButton.setText(bundle.getString("Easytranscript.NPbuttonCancelButton.text")); // NOI18N
        NPbuttonCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NPbuttonCancelButtonActionPerformed(evt);
            }
        });
        NPButtonPanel.add(NPbuttonCancelButton);

        NPbuttonBackButton.setText(bundle.getString("Easytranscript.NPbuttonBackButton.text")); // NOI18N
        NPbuttonBackButton.setEnabled(false);
        NPbuttonBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NPbuttonBackButtonActionPerformed(evt);
            }
        });
        NPButtonPanel.add(NPbuttonBackButton);

        NPbuttonNextButton.setText(bundle.getString("Easytranscript.NPbuttonNextButton.text")); // NOI18N
        NPbuttonNextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NPbuttonNextButtonActionPerformed(evt);
            }
        });
        NPButtonPanel.add(NPbuttonNextButton);
        NPbuttonNextButton.setEnabled(true);

        NPbuttonFinishButton.setText(bundle.getString("Easytranscript.NPbuttonFinishButton.text")); // NOI18N
        NPbuttonFinishButton.setEnabled(false);
        NPbuttonFinishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NPbuttonFinishButtonActionPerformed(evt);
            }
        });
        NPButtonPanel.add(NPbuttonFinishButton);

        NPprojHelpButton.setText(bundle.getString("Easytranscript.MainhelpMenuitem.text")); // NOI18N
        NPprojHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NPprojHelpButtonActionPerformed(evt);
            }
        });
        NPButtonPanel.add(NPprojHelpButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(NPButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(NPMainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(NPMainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(NPButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        NPMainTabbedPane.setSelectedIndex(0);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NPbuttonCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NPbuttonCancelButtonActionPerformed
        clearProjWindowValues();
    }//GEN-LAST:event_NPbuttonCancelButtonActionPerformed

    private void NPbuttonBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NPbuttonBackButtonActionPerformed
        if (NPMainTabbedPane.getSelectedIndex() > 0) {
            NPMainTabbedPane.setSelectedIndex(NPMainTabbedPane.getSelectedIndex() - 1);
        }

    }//GEN-LAST:event_NPbuttonBackButtonActionPerformed

    private void NPbuttonNextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NPbuttonNextButtonActionPerformed

        if (NPMainTabbedPane.getSelectedIndex() < NPMainTabbedPane.getTabCount()) {
            NPMainTabbedPane.setSelectedIndex(NPMainTabbedPane.getSelectedIndex() + 1);
        }

    }//GEN-LAST:event_NPbuttonNextButtonActionPerformed

    private void NPbuttonFinishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NPbuttonFinishButtonActionPerformed

        TransConfTmp.setProperty("PPorganizeTime", String.valueOf(NPmiscArbeitszeitCheckbox.isSelected()));

        if (NPprojProgrammVerwRadiobutton.isSelected() && NPprojProgrammTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(null, messages.getString("ProjectNameEmpty"), messages.getString("Error"), JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (PPprojNameWarning) {
            JOptionPane.showMessageDialog(null, messages.getString("ProjectNameError"), messages.getString("Error"), JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (NPtransCreateRadiobutton.isSelected() && NPtransCreateTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(null, messages.getString("TranscriptNameEmpty"), messages.getString("Error"), JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (PPtransNameWarning) {
            JOptionPane.showMessageDialog(null, messages.getString("TranscriptNameError"), messages.getString("Error"), JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (!new File(NPtransReadTextfield.getText()).exists() && !NPtransReadTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(null, messages.getString("TranscriptFileNotExists2"), messages.getString("Error"), JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (!new File(NPmediumPathTextfield.getText()).exists()) {
            if (!NPmediumPathTextfield.getText().contains("youtube.com/")) {

                JOptionPane.showMessageDialog(null, messages.getString("MediaFileNotExists2"), messages.getString("Error"), JOptionPane.WARNING_MESSAGE);
                return;
            }

        }
        
        if (NPmediumCopyMedtoProjCheckbox.isEnabled()==false){
            if (System.getProperty("os.arch").contains("64")){
                if (!Variables.useFXPlayer){
                if (!LibVlcVersion.getVersion().atLeast(new Version("2.2.0"))){
                    JOptionPane.showMessageDialog(null, messages.getString("YtVLCatLeast22"), messages.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    return;
                }
                }
            }
        }

        TranscriptHandler.create();
    }//GEN-LAST:event_NPbuttonFinishButtonActionPerformed

    private void NPMainTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_NPMainTabbedPaneStateChanged

        if (NPMainTabbedPane.isVisible()) {
            if (NPMainTabbedPane.getSelectedIndex() > 0) {
                NPbuttonBackButton.setEnabled(true);
            } else {
                NPbuttonBackButton.setEnabled(false);
            }
            if (NPMainTabbedPane.getSelectedIndex() < NPMainTabbedPane.getTabCount() - 1) {
                NPbuttonNextButton.setEnabled(true);
                // PPfinishB.setEnabled(false);
                NPconclusionInfoTextfield.setText("");
            } else {
                NPbuttonNextButton.setEnabled(false);
                String conclusion = "";

                if (NPprojProgrammVerwRadiobutton.isSelected()) {
                    conclusion = conclusion + (messages.getString("ConclusionLine1"));
                    String opF = opFolder;
                    if (opFolder.endsWith("\\") || opFolder.endsWith("/")) {
                        opF = opF.substring(0, opF.length() - 1);
                    }
                    conclusion = conclusion + (messages.getString("ConclusionLine2") + opF + System.getProperty("file.separator") + "Projects" + System.getProperty("file.separator") + NPprojProgrammTextfield.getText() + ".etp");
                } else {
                    conclusion = conclusion + (messages.getString("ConclusionLine3"));
                    conclusion = conclusion + (messages.getString("ConclusionLine2") + NPprojSpeicherortTextfield.getText());
                }

                if (NPtransCreateRadiobutton.isSelected()) {
                    conclusion = conclusion + (messages.getString("ConclusionLine4"));
                    conclusion = conclusion + (messages.getString("ConclusionLine5") + NPtransCreateTextfield.getText() + ".rtf");
                } else {
                    conclusion = conclusion + (messages.getString("ConclusionLine6"));
                    conclusion = conclusion + (messages.getString("ConclusionLine5") + NPtransReadTextfield.getText());
                    if (NPtranscopyTrtoProjCheckbox.isSelected()) {
                        conclusion = conclusion + (messages.getString("ConclusionLine7"));
                    } else {
                        conclusion = conclusion + (messages.getString("ConclusionLine8"));
                    }
                }

                conclusion = conclusion + (messages.getString("ConclusionLine9") + NPmediumPathTextfield.getText());
                if (NPmediumCopyMedtoProjCheckbox.isSelected()) {
                    conclusion = conclusion + (messages.getString("ConclusionLine10"));
                } else {
                    conclusion = conclusion + (messages.getString("ConclusionLine11"));
                }

                if (NPmiscArbeitszeitCheckbox.isSelected()) {
                    conclusion = conclusion + (messages.getString("ConclusionLine12"));
                } else {
                    conclusion = conclusion + (messages.getString("ConclusionLine13"));
                }

                NPconclusionInfoTextfield.setText(conclusion);

            }

            if (NPMainTabbedPane.getSelectedIndex() < NPMainTabbedPane.getTabCount() - 2) {
                NPbuttonFinishButton.setEnabled(false);
            } else {
                NPbuttonFinishButton.setEnabled(true);
            }

            if (NPMainTabbedPane.getSelectedIndex() == 1) {
                if (NPprojProgrammVerwRadiobutton.isSelected() && !NPprojProgrammTextfield.getText().trim().equals("")) {

                    if (new File(opFolder + "Projects/" + NPprojProgrammTextfield.getText() + ".etp").exists()) {
                        int response = JOptionPane.showConfirmDialog(null, messages.getString("ProjectExists"), messages.getString("WarningOverwriteTitle"),
                                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                        if (response == JOptionPane.NO_OPTION) {
                            NPMainTabbedPane.setSelectedIndex(0);
                        } else if (response == JOptionPane.YES_OPTION) {
                        } else if (response == JOptionPane.CLOSED_OPTION) {
                            NPMainTabbedPane.setSelectedIndex(0);
                        }
                    }

                }
            }

        }
    }//GEN-LAST:event_NPMainTabbedPaneStateChanged

    private void NPmediumChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NPmediumChooseButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter(messages.getString("FileFormats") + " " + Arrays.toString(formate), formate);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        for (String s : formate) {
            fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(s, s));
        }
        fileChooser.setFileFilter(filter);

        int ruckgabe = fileChooser.showOpenDialog(null);
        fileChooser.getSelectedFile();
        if (ruckgabe == JFileChooser.CANCEL_OPTION) {

            return;
        }

        mediaPath = ((File) fileChooser.getSelectedFile()).getAbsolutePath();
        NPmediumPathTextfield.setText(mediaPath);
    }//GEN-LAST:event_NPmediumChooseButtonActionPerformed

    private void NPtransReadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NPtransReadButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new FileNameExtensionFilter(messages.getString("rtfFiletype"), "rtf"));
        int ruckgabe = fileChooser.showOpenDialog(null);
        fileChooser.getSelectedFile();
        if (ruckgabe == JFileChooser.CANCEL_OPTION) {

            return;
        }

        NPtransReadTextfield.setText(((File) fileChooser.getSelectedFile()).getAbsolutePath());
    }//GEN-LAST:event_NPtransReadButtonActionPerformed

    private void NPtransReadRadiobuttonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_NPtransReadRadiobuttonStateChanged
        if (NPtransReadRadiobutton.isSelected()) {
            //         PPtranskriptCreateRb.setSelected(false);
            NPtransReadButton.setEnabled(true);
            NPtransCreateTextfield.setEditable(false);

            //         ProjConfTmp.setProperty("PPcreateNrtf", "false");
        } else {
            //        PPtranskriptCreateRb.setSelected(true);
            //       PPtranskriptReadRb.setSelected(false);
            NPtransCreateTextfield.setEditable(true);
            NPtransReadButton.setEnabled(false);

            //       ProjConfTmp.setProperty("PPcreateNrtf", "true");
        }
    }//GEN-LAST:event_NPtransReadRadiobuttonStateChanged

    private void NPtransCreateRadiobuttonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_NPtransCreateRadiobuttonStateChanged
        if (NPtransCreateRadiobutton.isSelected()) {
            //        PPtranskriptReadRb.setSelected(false);
            NPtransReadButton.setEnabled(false);
            NPtransCreateTextfield.setEditable(true);
            // ProjConfTmp.setProperty("PPcreateNrtf", "true");
            NPtranscopyTrtoProjCheckbox.setEnabled(false);

        } else {
            //         PPtranskriptReadRb.setSelected(true);
            //        PPtranskriptCreateRb.setSelected(false);
            NPtransCreateTextfield.setEditable(false);
            NPtransReadButton.setEnabled(true);
            //   ProjConfTmp.setProperty("PPcreateNrtf", "false");
            NPtranscopyTrtoProjCheckbox.setEnabled(true);

        }
    }//GEN-LAST:event_NPtransCreateRadiobuttonStateChanged

    private void NPprojSpeicherortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NPprojSpeicherortButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new FileNameExtensionFilter(messages.getString("etpFiletype"), "etp"));
        int ruckgabe = fileChooser.showSaveDialog(null);
        fileChooser.getSelectedFile();
        if (ruckgabe == JFileChooser.CANCEL_OPTION) {

            return;
        }

        transcriptPath = ((File) fileChooser.getSelectedFile()).getAbsolutePath();

        if (!transcriptPath.endsWith(".etp")) {
            transcriptPath = transcriptPath + ".etp";
        }

        if ((new File(transcriptPath)).exists()) {
            int response = JOptionPane.showConfirmDialog(null, messages.getString("WarningOverwrite"), messages.getString("WarningOverwriteTitle"),
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.NO_OPTION) {
                this.NPprojSpeicherortButtonActionPerformed(evt);

            } else if (response == JOptionPane.YES_OPTION) {
            } else if (response == JOptionPane.CLOSED_OPTION) {
                this.NPprojSpeicherortButtonActionPerformed(evt);
            }
        }

        NPprojSpeicherortTextfield.setText(transcriptPath);
    }//GEN-LAST:event_NPprojSpeicherortButtonActionPerformed

    private void NPprojSpeicherortSelbstRadiobuttonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_NPprojSpeicherortSelbstRadiobuttonStateChanged
        if (NPprojSpeicherortSelbstRadiobutton.isSelected()) {
            //      PPprojProgrammVerwRb.setSelected(false);
            NPprojProgrammTextfield.setEditable(false);
            NPprojSpeicherortButton.setEnabled(true);
            //      ProjConfTmp.setProperty("PPprogramorganize", "false");

        } else {
            //    PPprojProgrammVerwRb.setSelected(true);
            //   PPprojSpeicherortSelbstRb.setSelected(false);
            NPprojSpeicherortButton.setEnabled(false);
            NPprojProgrammTextfield.setEditable(true);

            //     ProjConfTmp.setProperty("PPprogramorganize", "true");
        }
    }//GEN-LAST:event_NPprojSpeicherortSelbstRadiobuttonStateChanged

    private void NPprojProgrammVerwRadiobuttonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_NPprojProgrammVerwRadiobuttonStateChanged
        if (NPprojProgrammVerwRadiobutton.isSelected()) {
            //            PPprojSpeicherortSelbstRb.setSelected(false);
            NPprojSpeicherortButton.setEnabled(false);
            NPprojProgrammTextfield.setEditable(true);
            //      ProjConfTmp.setProperty("PPprogramorganize", "true");
        } else {
            //          PPprojSpeicherortSelbstRb.setSelected(true);
            ///         PPprojProgrammVerwRb.setSelected(false);
            NPprojProgrammTextfield.setEditable(false);
            NPprojSpeicherortButton.setEnabled(true);
            //   ProjConfTmp.setProperty("PPprogramorganize", "false");
        }
    }//GEN-LAST:event_NPprojProgrammVerwRadiobuttonStateChanged

    private void NPprojHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NPprojHelpButtonActionPerformed

        new Tools().browse("http://e-werkzeug.eu/software/easytranscript/versions/" + Variables.VERSION.getMajorVersion() + "." + Variables.VERSION.getMinorVersion() + "/help/" + currentLocale.getLanguage() + "/");
    }//GEN-LAST:event_NPprojHelpButtonActionPerformed

    /**
     * Setzt die Wete des Projekt Erstellen-Dialog auf default.
     */
    public static void clearProjWindowValues() {

        //   ProjConf.clear();
        TransConfTmp.clear();
        PPprojNameWarning = false;
        PPtransNameWarning = false;

        newProjectFrame.setVisible(false);
        newProjectFrame.getNPprojProgrammTextfield().setText("");
        newProjectFrame.getNPprojSpeicherortTextfield().setText("");
        newProjectFrame.getNPtransCreateTextfield().setText("");
        newProjectFrame.getNPtransReadTextfield().setText("");
        newProjectFrame.getNPmediumPathTextfield().setText("");
        newProjectFrame.getNPmiscArbeitszeitCheckbox().setSelected(false);
        newProjectFrame.getNPMainTabbedPane().setSelectedIndex(0);
    }

    public JTextField getNPprojProgrammTextfield() {
        return NPprojProgrammTextfield;
    }

    public JTabbedPane getNPMainTabbedPane() {
        return NPMainTabbedPane;
    }

    public JCheckBox getNPmediumCopyMedtoProjCheckbox() {
        return NPmediumCopyMedtoProjCheckbox;
    }

    public JTextField getNPmediumPathTextfield() {
        return NPmediumPathTextfield;
    }

    public JCheckBox getNPmiscArbeitszeitCheckbox() {
        return NPmiscArbeitszeitCheckbox;
    }

    public JRadioButton getNPprojProgrammVerwRadiobutton() {
        return NPprojProgrammVerwRadiobutton;
    }

    public JRadioButton getNPprojSpeicherortSelbstRadiobutton() {
        return NPprojSpeicherortSelbstRadiobutton;
    }

    public JTextField getNPprojSpeicherortTextfield() {
        return NPprojSpeicherortTextfield;
    }

    public JRadioButton getNPtransCreateRadiobutton() {
        return NPtransCreateRadiobutton;
    }

    public JTextField getNPtransCreateTextfield() {
        return NPtransCreateTextfield;
    }

    public JRadioButton getNPtransReadRadiobutton() {
        return NPtransReadRadiobutton;
    }

    public JTextField getNPtransReadTextfield() {
        return NPtransReadTextfield;
    }

    public JCheckBox getNPtranscopyTrtoProjCheckbox() {
        return NPtranscopyTrtoProjCheckbox;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel NPButtonPanel;
    private javax.swing.JTabbedPane NPMainTabbedPane;
    private javax.swing.JButton NPbuttonBackButton;
    private javax.swing.JButton NPbuttonCancelButton;
    private javax.swing.JButton NPbuttonFinishButton;
    private javax.swing.JButton NPbuttonNextButton;
    private javax.swing.JTextArea NPconclusionInfoTextfield;
    private javax.swing.JPanel NPconclusionPanel;
    private javax.swing.JScrollPane NPconclusionScrollpane;
    private javax.swing.JLabel NPconclusionTitleLabel;
    private javax.swing.JButton NPmediumChooseButton;
    private javax.swing.JCheckBox NPmediumCopyMedtoProjCheckbox;
    private javax.swing.JPanel NPmediumPanel;
    private javax.swing.JLabel NPmediumPathLabel;
    private javax.swing.JTextField NPmediumPathTextfield;
    private javax.swing.JLabel NPmediumTitleLabel;
    private javax.swing.JCheckBox NPmiscArbeitszeitCheckbox;
    private javax.swing.JPanel NPmiscPanel;
    private javax.swing.JLabel NPmiscTitle;
    private javax.swing.ButtonGroup NPprojButtongroup;
    private javax.swing.JButton NPprojHelpButton;
    private javax.swing.JLabel NPprojNameLabel;
    private javax.swing.JLabel NPprojPreferredLabel;
    private javax.swing.JTextField NPprojProgrammTextfield;
    private javax.swing.JRadioButton NPprojProgrammVerwRadiobutton;
    private javax.swing.JButton NPprojSpeicherortButton;
    private javax.swing.JRadioButton NPprojSpeicherortSelbstRadiobutton;
    private javax.swing.JTextField NPprojSpeicherortTextfield;
    private javax.swing.JLabel NPprojTitleLabel;
    private javax.swing.JLabel NPprojWarningLabel;
    private javax.swing.JPanel NPprojectPanel;
    private javax.swing.ButtonGroup NPtransButtongroup;
    private javax.swing.JLabel NPtransCreateLabel;
    private javax.swing.JRadioButton NPtransCreateRadiobutton;
    private javax.swing.JTextField NPtransCreateTextfield;
    private javax.swing.JButton NPtransReadButton;
    private javax.swing.JRadioButton NPtransReadRadiobutton;
    private javax.swing.JTextField NPtransReadTextfield;
    private javax.swing.JLabel NPtransTitleLabel;
    private javax.swing.JLabel NPtransWarning1Label;
    private javax.swing.JCheckBox NPtranscopyTrtoProjCheckbox;
    private javax.swing.JPanel NPtranscriptPanel;
    // End of variables declaration//GEN-END:variables
}
