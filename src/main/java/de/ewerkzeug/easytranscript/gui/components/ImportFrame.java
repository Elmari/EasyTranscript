/*
 * Copyright (C) 2014 e-werkzeug <administrator@e-werkzeug.eu>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package de.ewerkzeug.easytranscript.gui.components;

import de.ewerkzeug.easytranscript.core.Easytranscript;
import static de.ewerkzeug.easytranscript.core.Variables.logger;
import static de.ewerkzeug.easytranscript.core.Variables.messages;
import static de.ewerkzeug.easytranscript.core.Variables.opFolder;
import de.ewerkzeug.easytranscript.IO.data.TranscriptHandler;
import static de.ewerkzeug.easytranscript.IO.data.TranscriptHandler.transcriptPath;
import de.ewerkzeug.easytranscript.tools.Tools;
import static de.ewerkzeug.easytranscript.tools.Tools.isStringSafe;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.SwingWorker;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author e-werkzeug <administrator@e-werkzeug.eu>
 */
public class ImportFrame extends javax.swing.JFrame {

    /**
     * Creates new form ImportFrame
     */
    public ImportFrame() {
        initComponents();
        setLocationRelativeTo(null);

        ImportPath2Textfield.setText(opFolder + "Projects");
        ImportPath2Textfield.validate();
        ImportPath2Textfield.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ImportTitleLabel = new javax.swing.JLabel();
        ImportPathTextfield = new javax.swing.JTextField();
        ImportChooseButton = new javax.swing.JToggleButton();
        ImportTitle1Label = new javax.swing.JLabel();
        ImportTitle2Label = new javax.swing.JLabel();
        ImportPath2Textfield = new javax.swing.JTextField();
        ImportPath2Button = new javax.swing.JButton();
        ImporttoProjDirCheckbox = new javax.swing.JCheckBox();
        ImportTitle3Label = new javax.swing.JLabel();
        ImportProjectNameTextfield = new javax.swing.JTextField();
        ImportExportnameCheckbox = new javax.swing.JCheckBox();
        ImportBottomPanel = new javax.swing.JPanel();
        ImportimportButton = new javax.swing.JButton();
        ImportCancelButton = new javax.swing.JButton();
        ImportstatusProgressbar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Bundle"); // NOI18N
        setTitle(bundle.getString("Easytranscript.ImportTitleLabel.text")); // NOI18N
        setResizable(false);

        ImportTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ImportTitleLabel.setText(bundle.getString("Easytranscript.ImportTitleLabel.text")); // NOI18N

        ImportPathTextfield.setEditable(false);

        ImportChooseButton.setText(bundle.getString("Easytranscript.ImportChooseButton.text")); // NOI18N
        ImportChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportChooseButtonActionPerformed(evt);
            }
        });

        ImportTitle1Label.setText(bundle.getString("Easytranscript.ImportTitle1Label.text")); // NOI18N

        ImportTitle2Label.setText(bundle.getString("Easytranscript.ImportTitle2Label.text")); // NOI18N

        ImportPath2Textfield.setEditable(false);

        ImportPath2Button.setText(bundle.getString("Easytranscript.ImportPath2Button.text")); // NOI18N
        ImportPath2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportPath2ButtonActionPerformed(evt);
            }
        });

        ImporttoProjDirCheckbox.setSelected(true);
        ImporttoProjDirCheckbox.setText(bundle.getString("Easytranscript.ImporttoProjDirCheckbox.text")); // NOI18N
        ImporttoProjDirCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImporttoProjDirCheckboxActionPerformed(evt);
            }
        });

        ImportTitle3Label.setText(bundle.getString("Easytranscript.ImportTitle3Label.text")); // NOI18N

        ImportProjectNameTextfield.setEditable(false);

        ImportExportnameCheckbox.setSelected(true);
        ImportExportnameCheckbox.setText(bundle.getString("Easytranscript.ImportExportnameCheckbox.text")); // NOI18N
        ImportExportnameCheckbox.setEnabled(false);
        ImportExportnameCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportExportnameCheckboxActionPerformed(evt);
            }
        });

        ImportimportButton.setText(bundle.getString("Easytranscript.ImportimportButton.text")); // NOI18N
        ImportimportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportimportButtonActionPerformed(evt);
            }
        });
        ImportBottomPanel.add(ImportimportButton);

        ImportCancelButton.setText(bundle.getString("Easytranscript.ImportCancelButton.text")); // NOI18N
        ImportCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportCancelButtonActionPerformed(evt);
            }
        });
        ImportBottomPanel.add(ImportCancelButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ImportBottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ImportstatusProgressbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ImportTitleLabel)
                                    .addComponent(ImportTitle1Label)
                                    .addComponent(ImportTitle2Label))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ImportPathTextfield)
                                            .addComponent(ImportPath2Textfield))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ImportChooseButton)
                                            .addComponent(ImportPath2Button)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ImporttoProjDirCheckbox)
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ImportTitle3Label)
                                .addGap(82, 82, 82))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ImportProjectNameTextfield)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ImportExportnameCheckbox)
                                        .addGap(0, 213, Short.MAX_VALUE)))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ImportTitleLabel)
                .addGap(30, 30, 30)
                .addComponent(ImportTitle1Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ImportPathTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ImportChooseButton))
                .addGap(18, 18, 18)
                .addComponent(ImportTitle2Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ImportPath2Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ImportPath2Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ImporttoProjDirCheckbox)
                .addGap(26, 26, 26)
                .addComponent(ImportTitle3Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ImportProjectNameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ImportExportnameCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ImportstatusProgressbar, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(ImportBottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        ImportPathTextfield.getDocument().addDocumentListener(new DocumentListener() {

            public void changedUpdate(DocumentEvent e){

            }

            public void removeUpdate(DocumentEvent e){

            }
            public void insertUpdate(DocumentEvent e) {

                ImportExportnameCheckboxActionPerformed(null);
                ImportExportnameCheckbox.setEnabled(true);

            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ImportChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportChooseButtonActionPerformed
        ImportChooseButton.setSelected(false);
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new FileNameExtensionFilter(messages.getString("zetpFiletype"), "zetp"));

        int ruckgabe = fileChooser.showOpenDialog(null);
        fileChooser.getSelectedFile();
        if (ruckgabe == JFileChooser.CANCEL_OPTION) {

            return;
        }

        if (ruckgabe == JFileChooser.APPROVE_OPTION) {
            ImportPathTextfield.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_ImportChooseButtonActionPerformed

    private void ImportPath2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportPath2ButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //    jFileChooser1.setFileFilter(new CustomFilter(".zetp"));

        int ruckgabe = fileChooser.showSaveDialog(null);
        fileChooser.getSelectedFile();
        if (ruckgabe == JFileChooser.CANCEL_OPTION) {

            return;
        }

        if (ruckgabe == JFileChooser.APPROVE_OPTION) {
            ImportPath2Textfield.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_ImportPath2ButtonActionPerformed

    private void ImportExportnameCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportExportnameCheckboxActionPerformed
        if (ImportExportnameCheckbox.isSelected()) {
            String projName = "";
            try {
                ZipFile zipFile = new ZipFile(ImportPathTextfield.getText());
                Enumeration entries = zipFile.entries();

                while (entries.hasMoreElements()) {
                    ZipEntry entry = (ZipEntry) entries.nextElement();
                    if (entry.isDirectory() == false) {
                        if (entry.getName().endsWith(".etp")) {
                            projName = entry.getName().substring(0, entry.getName().lastIndexOf("."));
                            break;
                        }
                    }
                }
                ImportProjectNameTextfield.setEditable(false);
            } catch (ZipException ex) {
                Logger.getLogger(ImportFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ImportFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            ImportProjectNameTextfield.setText(projName);
        } else {
            ImportProjectNameTextfield.setText("");
            ImportProjectNameTextfield.setEditable(true);
        }
    }//GEN-LAST:event_ImportExportnameCheckboxActionPerformed

    private void ImportimportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportimportButtonActionPerformed

        String name = ImportProjectNameTextfield.getText();
        boolean check = isStringSafe(name);
        if (!check) {
            JOptionPane.showMessageDialog(null, messages.getString("ErrorUnallowedChars"), messages.getString("Error"), JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (name.equals("")) {
            JOptionPane.showMessageDialog(null, messages.getString("ErrorEmptyName"), messages.getString("Error"), JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (ImportPathTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(null, messages.getString("ImportMessage9"), messages.getString("Error"), JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (ImportPath2Textfield.getText().equals("")) {
            JOptionPane.showMessageDialog(null, messages.getString("ImportMessage8"), messages.getString("Error"), JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (new File(ImportPath2Textfield.getText() + "/" + name + ".etp").exists()) {
            int response = JOptionPane.showConfirmDialog(null, messages.getString("ImportMessage6"), messages.getString("ImportMessage7"),
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (response == JOptionPane.NO_OPTION) {
                return;
            } else if (response == JOptionPane.YES_OPTION) {
            } else if (response == JOptionPane.CLOSED_OPTION) {
                return;
            }
        }

        ZipFile zipFile;
        String projName = "";

        try {
            zipFile = new ZipFile(ImportPathTextfield.getText());
            Enumeration entries = zipFile.entries();

            while (entries.hasMoreElements()) {
                ZipEntry entry = (ZipEntry) entries.nextElement();
                if (entry.isDirectory() == false) {
                    if (entry.getName().endsWith(".etp")) {
                        projName = entry.getName().substring(0, entry.getName().lastIndexOf("."));
                        break;
                    }
                }
            }

        } catch (ZipException ex) {
            Logger.getLogger(Easytranscript.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Easytranscript.class.getName()).log(Level.SEVERE, null, ex);
        }

        if ((ImportPath2Textfield.getText() + "/" + ImportProjectNameTextfield.getText() + ".etp").equals(transcriptPath)) {
            JOptionPane.showMessageDialog(null, messages.getString("ImportMessage5"), messages.getString("Error"), JOptionPane.ERROR_MESSAGE);
            return;
        }

        final SwingWorker worker = new SwingWorker<String, Void>() {
            @Override
            protected String doInBackground() {
                String projName = "";
                try {
                    ZipFile zipFile = new ZipFile(ImportPathTextfield.getText());
                    Enumeration entries = zipFile.entries();

                    while (entries.hasMoreElements()) {
                        ZipEntry entry = (ZipEntry) entries.nextElement();
                        if (entry.isDirectory() == false) {
                            if (entry.getName().endsWith(".etp")) {
                                projName = entry.getName().substring(0, entry.getName().lastIndexOf("."));
                                break;
                            }
                        }
                    }

                } catch (ZipException ex) {
                    Logger.getLogger(Easytranscript.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Easytranscript.class.getName()).log(Level.SEVERE, null, ex);
                }

                try {

                    if (new File(opFolder + "/" + "Projects/tmp").exists()) {
                        FileUtils.deleteDirectory(new File(opFolder + "/" + "Projects/tmp"));
                    }
                    new File(opFolder + "/" + "Projects/tmp").mkdir();

                    Tools.extractArchive(new File(ImportPathTextfield.getText()), new File(opFolder + "/" + "Projects/tmp"));
                    new File(opFolder + "/Projects/tmp/" + projName + ".etp").renameTo(new File(opFolder + "/Projects/tmp/" + ImportProjectNameTextfield.getText() + ".etp"));

                    if (new File(ImportPath2Textfield.getText() + "/" + ImportProjectNameTextfield.getText() + "_Data").exists()) {
                        FileUtils.deleteDirectory(new File(ImportPath2Textfield.getText() + "/" + ImportProjectNameTextfield.getText() + "_Data"));
                    }

                    if (new File(ImportPath2Textfield.getText() + "/" + ImportProjectNameTextfield.getText() + ".etp").exists()) {
                        new File(ImportPath2Textfield.getText() + "/" + ImportProjectNameTextfield.getText() + ".etp").delete();
                    }
                    FileUtils.moveDirectory(new File(opFolder + "/Projects/tmp/" + projName + "_Data"), new File(ImportPath2Textfield.getText() + "/" + ImportProjectNameTextfield.getText() + "_Data"));
                    FileUtils.moveFile(new File(opFolder + "/Projects/tmp/" + ImportProjectNameTextfield.getText() + ".etp"), new File(ImportPath2Textfield.getText() + "/" + ImportProjectNameTextfield.getText() + ".etp"));
                    FileUtils.deleteDirectory(new File(opFolder + "/" + "Projects/tmp"));

                    if (new File(ImportPath2Textfield.getText() + "/" + ImportProjectNameTextfield.getText() + "_Data/Backups").exists() == false) {
                        new File(ImportPath2Textfield.getText() + "/" + ImportProjectNameTextfield.getText() + "_Data/Backups").mkdir();
                    }
                    return "success";

                } catch (IOException ex) {
                    logger.log(Level.WARNING, "Es ist ein Fehler beim Import des Projektes aufgetreten.", ex);
                    return "failed";
                }

            }

            @Override
            protected void done() {
                Toolkit.getDefaultToolkit().beep();

                String get = "";
                try {
                    get = get();
                } catch (InterruptedException ex) {
                    logger.log(Level.SEVERE, "Der Erfolg des Imports kann nicht überprüft werden.", ex);
                } catch (ExecutionException ex) {
                    logger.log(Level.SEVERE, "Der Erfolg des Imports kann nicht überprüft werden.", ex);
                }
                if (get.equals("success")) {
                    int n = JOptionPane.showConfirmDialog(null, messages.getString("ImportMessage3"), messages.getString("ImportMessage4"), JOptionPane.YES_NO_OPTION);
                    if (n == JOptionPane.YES_OPTION) {
                        TranscriptHandler.read(ImportPath2Textfield.getText() + System.getProperty("file.separator") + ImportProjectNameTextfield.getText() + ".etp");
                    }
                } else if (get.equals("failed")) {
                    JOptionPane.showMessageDialog(null, messages.getString("ImportMessage2"), messages.getString("Error"), JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, messages.getString("ImportMessage1"), messages.getString("Error"), JOptionPane.ERROR_MESSAGE);
                }
                dispose();
            }

        };

        ImportstatusProgressbar.setValue(100);
        ImportstatusProgressbar.setString(messages.getString("Wait"));
        ImportstatusProgressbar.setStringPainted(true);
        ImportimportButton.setEnabled(false);
        ImportCancelButton.setEnabled(false);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

        worker.execute();
    }//GEN-LAST:event_ImportimportButtonActionPerformed

    private void ImportCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportCancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_ImportCancelButtonActionPerformed

    private void ImporttoProjDirCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImporttoProjDirCheckboxActionPerformed
        if (ImporttoProjDirCheckbox.isSelected()) {
            ImportPath2Textfield.setText(opFolder + "Projects");
            ImportPath2Button.setEnabled(false);
        } else {
            ImportPath2Textfield.setText("");
            ImportPath2Button.setEnabled(true);
        }
    }//GEN-LAST:event_ImporttoProjDirCheckboxActionPerformed

    public JToggleButton getImportChooseButton() {
        return ImportChooseButton;
    }

    public JCheckBox getImportExportnameCheckbox() {
        return ImportExportnameCheckbox;
    }

    public JTextField getImportPath2Textfield() {
        return ImportPath2Textfield;
    }

    public JTextField getImportPathTextfield() {
        return ImportPathTextfield;
    }

    public JTextField getImportProjectNameTextfield() {
        return ImportProjectNameTextfield;
    }

    public JProgressBar getImportstatusProgressbar() {
        return ImportstatusProgressbar;
    }

    public JButton getImportCancelButton() {
        return ImportCancelButton;
    }

    public JButton getImportPath2Button() {
        return ImportPath2Button;
    }

    public JLabel getImportTitle2Label() {
        return ImportTitle2Label;
    }

    public JLabel getImportTitle3Label() {
        return ImportTitle3Label;
    }

    public JLabel getImportTitleLabel() {
        return ImportTitleLabel;
    }

    public JButton getImportimportButton() {
        return ImportimportButton;
    }

    public JCheckBox getImporttoProjDirCheckbox() {
        return ImporttoProjDirCheckbox;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ImportBottomPanel;
    private javax.swing.JButton ImportCancelButton;
    private javax.swing.JToggleButton ImportChooseButton;
    private javax.swing.JCheckBox ImportExportnameCheckbox;
    private javax.swing.JButton ImportPath2Button;
    private javax.swing.JTextField ImportPath2Textfield;
    private javax.swing.JTextField ImportPathTextfield;
    private javax.swing.JTextField ImportProjectNameTextfield;
    private javax.swing.JLabel ImportTitle1Label;
    private javax.swing.JLabel ImportTitle2Label;
    private javax.swing.JLabel ImportTitle3Label;
    private javax.swing.JLabel ImportTitleLabel;
    private javax.swing.JButton ImportimportButton;
    private javax.swing.JProgressBar ImportstatusProgressbar;
    private javax.swing.JCheckBox ImporttoProjDirCheckbox;
    // End of variables declaration//GEN-END:variables
}
