
/*
 * Copyright (C) 2014 e-werkzeug <administrator@e-werkzeug.eu>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package de.ewerkzeug.easytranscript.GUI.Components;

import de.ewerkzeug.easytranscript.Core.Easytranscript;
import de.ewerkzeug.easytranscript.Core.V;
import static de.ewerkzeug.easytranscript.Core.V.currentLocale;
import static de.ewerkzeug.easytranscript.Core.V.logger;
import static de.ewerkzeug.easytranscript.Core.V.messages;
import static de.ewerkzeug.easytranscript.Core.V.opFolder;
import static de.ewerkzeug.easytranscript.Core.V.projFolder;
import static de.ewerkzeug.easytranscript.Core.V.zeitFrame;
import de.ewerkzeug.easytranscript.IO.Data.EasyData;
import de.ewerkzeug.easytranscript.IO.Data.ProjectHandler;
import de.ewerkzeug.easytranscript.IO.Data.TranscriptHandler;
import de.ewerkzeug.easytranscript.Tools.Tools;
import java.awt.Desktop;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author e-werkzeug <administrator@e-werkzeug.eu>
 */
public class ProjectFrame extends javax.swing.JFrame {

    MetaFrame meta;

    /**
     * Creates new form ProjectFolderFrame
     */
    public ProjectFrame() {
        initComponents();

        setLocationRelativeTo(null);

        setDropTarget(new DropTarget() {
            @Override
            public synchronized void drop(DropTargetDropEvent evt) {
                try {
                    evt.acceptDrop(DnDConstants.ACTION_COPY);
                    List<File> droppedFiles = (List<File>) evt
                            .getTransferable().getTransferData(
                                    DataFlavor.javaFileListFlavor);
                    if (droppedFiles.get(0).getAbsolutePath().endsWith(".etp")) {
                        addFilesToFolder((File[]) droppedFiles.toArray(), ProjectHandler.TYPE_PROJECT);

                    } else {
                        addFilesToFolder((File[]) droppedFiles.toArray(), ProjectHandler.TYPE_FILE);
                    }

                } catch (UnsupportedFlavorException | IOException ex) {
                    logger.log(Level.WARNING, "Drop exception: " + ex.getMessage(), ex);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PFactionsPopupmenu = new javax.swing.JPopupMenu();
        PFactionsAddTransMenuitem = new javax.swing.JMenuItem();
        PFactionsDeleteMenuitem = new javax.swing.JMenuItem();
        PFactionsAddFileMenuitem = new javax.swing.JMenuItem();
        PFactionsInformationMenuitem = new javax.swing.JMenuItem();
        PFactionsExportSingleMenuitem = new javax.swing.JMenuItem();
        PFmainPanel = new javax.swing.JPanel();
        PFtreeScrollpane = new javax.swing.JScrollPane();
        PFtreeTree = new javax.swing.JTree();
        PFtoolsToolbar = new javax.swing.JToolBar();
        PFaddProjectButton = new javax.swing.JButton();
        PFaddFileButton = new javax.swing.JButton();
        PFdeleteButton = new javax.swing.JButton();
        PFsepSeparator = new javax.swing.JToolBar.Separator();
        PFtimeButton = new javax.swing.JButton();
        PFcopyAllButton = new javax.swing.JButton();
        PFinfoButton = new javax.swing.JButton();
        PFsep2Separator = new javax.swing.JToolBar.Separator();
        PFhelpButton = new javax.swing.JButton();

        PFactionsAddTransMenuitem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, 0));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/ewerkzeug/easytranscript/Core/Bundles/Bundle"); // NOI18N
        PFactionsAddTransMenuitem.setText(bundle.getString("Easytranscript.PFaddProjectButton.toolTipText")); // NOI18N
        PFactionsAddTransMenuitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PFactionsAddTransMenuitemActionPerformed(evt);
            }
        });
        PFactionsPopupmenu.add(PFactionsAddTransMenuitem);

        PFactionsDeleteMenuitem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        PFactionsDeleteMenuitem.setText(bundle.getString("Easytranscript.PFactionsDeleteMenuitem.text")); // NOI18N
        PFactionsDeleteMenuitem.setEnabled(false);
        PFactionsDeleteMenuitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PFactionsDeleteMenuitemActionPerformed(evt);
            }
        });
        PFactionsPopupmenu.add(PFactionsDeleteMenuitem);

        PFactionsAddFileMenuitem.setText(bundle.getString("Easytranscript.PFactionsAddFileMenuitem.text_1")); // NOI18N
        PFactionsAddFileMenuitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PFactionsAddFileMenuitemActionPerformed(evt);
            }
        });
        PFactionsPopupmenu.add(PFactionsAddFileMenuitem);

        PFactionsInformationMenuitem.setText(bundle.getString("Easytranscript.MainProjectInfosMenuitem.text")); // NOI18N
        PFactionsInformationMenuitem.setEnabled(false);
        PFactionsInformationMenuitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PFactionsInformationMenuitemActionPerformed(evt);
            }
        });
        PFactionsPopupmenu.add(PFactionsInformationMenuitem);

        PFactionsExportSingleMenuitem.setText(bundle.getString("Easytranscript.PFactionsExportSingleMenuitem.text")); // NOI18N
        PFactionsExportSingleMenuitem.setEnabled(false);
        PFactionsExportSingleMenuitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PFactionsExportSingleMenuitemActionPerformed(evt);
            }
        });
        PFactionsPopupmenu.add(PFactionsExportSingleMenuitem);

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Projekt");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Transkripte (Transcripts)");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Dateien (Other)");
        treeNode1.add(treeNode2);
        PFtreeTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        PFtreeTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                PFtreeTreeMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                PFtreeTreeMouseReleased(evt);
            }
        });
        PFtreeTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                PFtreeTreeValueChanged(evt);
            }
        });
        PFtreeTree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PFtreeTreeKeyPressed(evt);
            }
        });
        PFtreeScrollpane.setViewportView(PFtreeTree);
        PFtreeTree.getSelectionModel().setSelectionMode
        (TreeSelectionModel.SINGLE_TREE_SELECTION);

        javax.swing.GroupLayout PFmainPanelLayout = new javax.swing.GroupLayout(PFmainPanel);
        PFmainPanel.setLayout(PFmainPanelLayout);
        PFmainPanelLayout.setHorizontalGroup(
            PFmainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PFmainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PFtreeScrollpane)
                .addContainerGap())
        );
        PFmainPanelLayout.setVerticalGroup(
            PFmainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PFtreeScrollpane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
        );

        PFtoolsToolbar.setFloatable(false);

        PFaddProjectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/proj_1.png"))); // NOI18N
        PFaddProjectButton.setText(bundle.getString("Easytranscript.PFaddProjectButton.text")); // NOI18N
        PFaddProjectButton.setToolTipText(bundle.getString("Easytranscript.PFaddProjectButton.toolTipText")); // NOI18N
        PFaddProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PFaddProjectButtonActionPerformed(evt);
            }
        });
        PFtoolsToolbar.add(PFaddProjectButton);

        PFaddFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/misc_1.png"))); // NOI18N
        PFaddFileButton.setText(bundle.getString("Easytranscript.PFaddFileButton.text")); // NOI18N
        PFaddFileButton.setToolTipText(bundle.getString("Easytranscript.PFaddFileButton.toolTipText")); // NOI18N
        PFaddFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PFaddFileButtonActionPerformed(evt);
            }
        });
        PFtoolsToolbar.add(PFaddFileButton);

        PFdeleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/document-close-4.png"))); // NOI18N
        PFdeleteButton.setText(bundle.getString("Easytranscript.PFdeleteButton.text")); // NOI18N
        PFdeleteButton.setToolTipText(bundle.getString("Easytranscript.PFdeleteButton.toolTipText")); // NOI18N
        PFdeleteButton.setEnabled(false);
        PFdeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PFdeleteButtonActionPerformed(evt);
            }
        });
        PFtoolsToolbar.add(PFdeleteButton);
        PFtoolsToolbar.add(PFsepSeparator);

        PFtimeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/view-history_big.png"))); // NOI18N
        PFtimeButton.setText(bundle.getString("Easytranscript.PFtimeButton.text")); // NOI18N
        PFtimeButton.setToolTipText(bundle.getString("Easytranscript.PFtimeButton.toolTipText")); // NOI18N
        PFtimeButton.setFocusable(false);
        PFtimeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        PFtimeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        PFtimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PFtimeButtonActionPerformed(evt);
            }
        });
        PFtoolsToolbar.add(PFtimeButton);

        PFcopyAllButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/document-open-8_big.png"))); // NOI18N
        PFcopyAllButton.setText(bundle.getString("Easytranscript.PFcopyAllButton.text")); // NOI18N
        PFcopyAllButton.setToolTipText(bundle.getString("Easytranscript.PFcopyAllButton.toolTipText")); // NOI18N
        PFcopyAllButton.setFocusable(false);
        PFcopyAllButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        PFcopyAllButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        PFcopyAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PFcopyAllButtonActionPerformed(evt);
            }
        });
        PFtoolsToolbar.add(PFcopyAllButton);

        PFinfoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/help-about-3_1.png"))); // NOI18N
        PFinfoButton.setToolTipText(bundle.getString("Easytranscript.MainProjectInfosMenuitem.text")); // NOI18N
        PFinfoButton.setFocusable(false);
        PFinfoButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        PFinfoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        PFinfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PFinfoButtonActionPerformed(evt);
            }
        });
        PFtoolsToolbar.add(PFinfoButton);
        PFtoolsToolbar.add(PFsep2Separator);

        PFhelpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/help-hint.png"))); // NOI18N
        PFhelpButton.setToolTipText(bundle.getString("Easytranscript.MainhelpMenuitem.text")); // NOI18N
        PFhelpButton.setFocusable(false);
        PFhelpButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        PFhelpButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        PFhelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PFhelpButtonActionPerformed(evt);
            }
        });
        PFtoolsToolbar.add(PFhelpButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PFmainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PFtoolsToolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PFtoolsToolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(PFmainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PFtreeTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PFtreeTreeMousePressed

        if (evt.getClickCount() == 2) {
            DefaultMutableTreeNode selected = (DefaultMutableTreeNode) PFtreeTree.getLastSelectedPathComponent();
            DefaultMutableTreeNode parent = null;
            try {
                parent = (DefaultMutableTreeNode) selected.getParent();
            } catch (Exception e) {

            }

            if (parent == null) {
                return;
            }

            if (parent.toString().equals(messages.getString("Transkripte"))) {

                boolean notexisting = checkFile(getPathForCurrent(), ProjectHandler.TYPE_PROJECT);
                if (notexisting) {
                    return;
                }

                TranscriptHandler.read(getPathForCurrent());
            }

            if (parent.toString().equals(messages.getString("Dateien"))) {

                try {
                    Desktop.getDesktop().open(new File((String) selected.getUserObject()));
                } catch (IOException ex) {
                    checkFile((String) selected.getUserObject(), ProjectHandler.TYPE_FILE);

                }
            }

        }

    }//GEN-LAST:event_PFtreeTreeMousePressed

    private void PFtreeTreeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PFtreeTreeMouseReleased
        if (evt.isPopupTrigger()) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) PFtreeTree.getLastSelectedPathComponent();

            PFactionsExportSingleMenuitem.setEnabled(((String) node.getUserObject()).endsWith(".etp"));

            this.PFactionsPopupmenu.show(evt.getComponent(),
                    evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_PFtreeTreeMouseReleased

    private void PFtreeTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_PFtreeTreeValueChanged
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) PFtreeTree.getLastSelectedPathComponent();
        DefaultMutableTreeNode parent = null;
        try {
            parent = (DefaultMutableTreeNode) node.getParent().getParent();
        } catch (Exception e) {

        }
        if (parent != null) {
            PFactionsDeleteMenuitem.setEnabled(true);
            PFdeleteButton.setEnabled(true);
            PFactionsInformationMenuitem.setEnabled(true);
            PFactionsExportSingleMenuitem.setEnabled(true);
        } else {
            PFactionsDeleteMenuitem.setEnabled(false);
            PFdeleteButton.setEnabled(false);
            PFactionsInformationMenuitem.setEnabled(false);
            PFactionsExportSingleMenuitem.setEnabled(false);
        }
    }//GEN-LAST:event_PFtreeTreeValueChanged

    private void PFtreeTreeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PFtreeTreeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            DefaultMutableTreeNode selected = (DefaultMutableTreeNode) PFtreeTree.getLastSelectedPathComponent();
            DefaultMutableTreeNode parent = null;
            try {
                parent = (DefaultMutableTreeNode) selected.getParent();
            } catch (Exception e) {

            }

            if (parent == null) {
                // expand...
            }

            if (parent.toString().equals(messages.getString("Transkripte"))) {

                File check = new File(getPathForCurrent());
                if (!check.exists()) {
                    return;
                }

                TranscriptHandler.read(getPathForCurrent());
            }

            if (parent.toString().equals(messages.getString("Dateien"))) {

                File check = new File((String) selected.getUserObject());

                try {
                    Desktop.getDesktop().open(new File((String) selected.getUserObject()));
                } catch (IOException ex) {
                    checkFile((String) selected.getUserObject(), ProjectHandler.TYPE_FILE);

                }
            }

        }
    }//GEN-LAST:event_PFtreeTreeKeyPressed

    private void PFaddProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PFaddProjectButtonActionPerformed
        PFactionsAddTransMenuitemActionPerformed(null);
    }//GEN-LAST:event_PFaddProjectButtonActionPerformed

    private void PFaddFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PFaddFileButtonActionPerformed
        this.PFactionsAddFileMenuitemActionPerformed(null);
    }//GEN-LAST:event_PFaddFileButtonActionPerformed

    private void PFdeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PFdeleteButtonActionPerformed
        this.PFactionsDeleteMenuitemActionPerformed(null);
    }//GEN-LAST:event_PFdeleteButtonActionPerformed

    private void PFtimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PFtimeButtonActionPerformed

        String[] columnNames = {"ID",
            messages.getString("dateiname"),
            messages.getString("Gesamtdauer")
        };

        Object[][] data = {};
        zeitFrame.getZeitTableTable().setModel(new DefaultTableModel(data, columnNames) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });
        zeitFrame.getZeitActivateCheckbox().setVisible(false);
        zeitFrame.getZeitDeleteAllButton().setEnabled(false);
        List<String> list = projFolder.getList(ProjectHandler.TYPE_PROJECT);
        int j = 0;
        int gesamtminuten = 0;
        for (String s : list) {
            j++;
            String sT = s.substring(0, s.lastIndexOf(".")) + "_Data/default.arbeitszeit";

            int minutenvalue = 0;

            if (new File(sT).exists()) {
                try {
                    EasyData p = new EasyData();
                    p.load(new FileInputStream(sT));

                    if (p.getProperty("length") != null) {

                        for (int i = 0; i < Integer.valueOf(p.getProperty("length")); i++) {

                            String startV = p.getProperty("[" + (i + 1) + "]Start");
                            String endeV = p.getProperty("[" + (i + 1) + "]Ende");

                            SimpleDateFormat strToDate = new SimpleDateFormat("dd.MM.yyyy '-' HH:mm");
                            Date startD = null, endD = null;
                            if (startV != null) {
                                if (!startV.equals("")) {
                                    try {
                                        startD = strToDate.parse(startV);
                                    } catch (ParseException ex) {
                                        V.logger.log(Level.WARNING, "Die Auswertung der Arbeitszeitdaten schlug fehl. (startD)", ex);

                                    }

                                }
                            }

                            if (endeV != null) {
                                if (!endeV.equals("")) {
                                    try {

                                        endD = strToDate.parse(endeV);
                                    } catch (ParseException ex) {
                                        V.logger.log(Level.WARNING, "Die Auswertung der Arbeitszeitdaten schlug fehl. (endD)", ex);
                                    }
                                }
                            }

                            if (endeV != null && startV != null) {
                                long difference = endD.getTime() - startD.getTime();
                                double minuten = difference / 1000 / 60;
                                minuten = Math.round(minuten * 10) / 10.0;

                                minutenvalue = minutenvalue + new Double(minuten).intValue();

                            }
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(ProjectFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

            // gesamtminuten = gesamtminuten + minutenvalue;
            String laengenS = String.format(("%02d " + messages.getString("Stunden")) + ", " + ("%02d " + messages.getString("Minuten")), (int) (TimeUnit.MINUTES.toHours(minutenvalue)),
                    (int) (TimeUnit.MINUTES.toMinutes(minutenvalue) - TimeUnit.HOURS.toMinutes(TimeUnit.MINUTES.toHours(minutenvalue))));

            ((DefaultTableModel) zeitFrame.getZeitTableTable().getModel()).addRow(new Object[]{j, new File(s).getName(), laengenS});

            gesamtminuten = gesamtminuten + minutenvalue;

        }

        zeitFrame.getZeitTableTable().repaint();

        String laengeGesamt = String.format("%02d " + messages.getString("Stunden") + ", " + "%02d " + messages.getString("Minuten"), (int) TimeUnit.MINUTES.toHours(gesamtminuten),
                (int) (TimeUnit.MINUTES.toMinutes(gesamtminuten) - TimeUnit.HOURS.toMinutes(TimeUnit.MINUTES.toHours(gesamtminuten))));

        zeitFrame.getZeitTotalLabel().setText(messages.getString("Gesamtdauer") + ": " + laengeGesamt);

        if (zeitFrame.getZeitHourlyRadiobutton().isSelected()) {
            zeitFrame.getZeitHourlyRadiobutton().getChangeListeners()[0].stateChanged(null);
        }
        if (zeitFrame.getZeitFixRadiobutton().isSelected()) {
            zeitFrame.getZeitFixRadiobutton().getChangeListeners()[0].stateChanged(null);
        }

        zeitFrame.setVisible(true);
    }//GEN-LAST:event_PFtimeButtonActionPerformed

    private void PFcopyAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PFcopyAllButtonActionPerformed
        List<String> list = projFolder.getList(ProjectHandler.TYPE_PROJECT);
        File d;
        boolean failure = false;

        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            d = chooser.getSelectedFile();
        } else {
            return;
        }

        for (String s : list) {
            EasyData p = new EasyData();
            try {
                p.load(new FileInputStream(s));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ProjectFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ProjectFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

            String t = p.getProperty("transcriptName");
            File f;

            if (t != null) {
                if (!"".equals(t)) {

                    String projectNameTmp = s.substring(s.lastIndexOf(System.getProperty("file.separator")) + 1, s.lastIndexOf("."));

                    String projectDataS = s.substring(0, s.lastIndexOf(System.getProperty("file.separator")) + 1) + projectNameTmp + "_Data";
                    f = new File(projectDataS + System.getProperty("file.separator") + t + ".rtf");
                } else {
                    t = p.getProperty("transcriptPath");
                    f = new File(t);
                }
            } else {
                t = p.getProperty("transcriptPath");
                f = new File(t);
            }
            try {
                FileUtils.copyFileToDirectory(f, d);
            } catch (IOException ex) {
                Logger.getLogger(ProjectFrame.class.getName()).log(Level.SEVERE, null, ex);
                failure = true;
            }
        }

        if (failure) {
            JOptionPane.showMessageDialog(null, messages.getString("ProjectFolderCopyAllFailure"));
        }

    }//GEN-LAST:event_PFcopyAllButtonActionPerformed

    private void PFactionsAddTransMenuitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PFactionsAddTransMenuitemActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new FileNameExtensionFilter(messages.getString("etpFiletype"), "etp"));
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setCurrentDirectory(new File(opFolder + "Projects/"));
        int ruckgabe = fileChooser.showOpenDialog(null);

        if (ruckgabe == JFileChooser.CANCEL_OPTION) {

            return;
        }

        if (ruckgabe == JFileChooser.APPROVE_OPTION) {

            addFilesToFolder(fileChooser.getSelectedFiles(), ProjectHandler.TYPE_PROJECT);

            //     PFtreeTree.expandPath(new TreePath(((DefaultMutableTreeNode) projects.getChildAt(projects.getChildCount()-1)).getPath()));
        }

    }//GEN-LAST:event_PFactionsAddTransMenuitemActionPerformed

    private void PFactionsDeleteMenuitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PFactionsDeleteMenuitemActionPerformed
        DefaultMutableTreeNode node;
        DefaultTreeModel model = (DefaultTreeModel) (PFtreeTree.getModel());
        TreePath[] paths = PFtreeTree.getSelectionPaths();

        for (TreePath path : paths) {
            node = (DefaultMutableTreeNode) (path.getLastPathComponent());

            if (node.getParent().toString().equals(messages.getString("Transkripte"))) {
                projFolder.delete(getPathForCurrent(), ProjectHandler.TYPE_PROJECT);
            } else {
                projFolder.delete((String) node.getUserObject(), ProjectHandler.TYPE_FILE);
            }

            model.removeNodeFromParent(node);
        }

        projFolder.save();

    }//GEN-LAST:event_PFactionsDeleteMenuitemActionPerformed

    private void PFactionsAddFileMenuitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PFactionsAddFileMenuitemActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setCurrentDirectory(new File(opFolder + "Projects/"));
        int ruckgabe = fileChooser.showOpenDialog(null);

        if (ruckgabe == JFileChooser.CANCEL_OPTION) {

            return;
        }

        if (ruckgabe == JFileChooser.APPROVE_OPTION) {

            DefaultMutableTreeNode root = (DefaultMutableTreeNode) PFtreeTree.getModel().getRoot();

            DefaultMutableTreeNode fileNode = ((DefaultMutableTreeNode) root.getChildAt(1));

            File[] files = fileChooser.getSelectedFiles();

            for (File f : files) {

                boolean prevent = false;
                for (int i = 0; i < fileNode.getChildCount(); i++) {
                    prevent = ((String) ((DefaultMutableTreeNode) fileNode.getChildAt(i)).getUserObject()).equals(f.getAbsolutePath());

                    if (prevent == true) {

                        break;
                    }

                }

                if (!prevent) {
                    DefaultMutableTreeNode node = new DefaultMutableTreeNode(f.getName());
                    node.setUserObject(f.getAbsolutePath());
                    fileNode.add(node);
                }
            }

            projFolder.add(files, ProjectHandler.TYPE_FILE);
            projFolder.save();

            ((DefaultTreeModel) PFtreeTree.getModel()).reload();

            //     PFtreeTree.expandPath(new TreePath(((DefaultMutableTreeNode) projects.getChildAt(projects.getChildCount()-1)).getPath()));
        }
    }//GEN-LAST:event_PFactionsAddFileMenuitemActionPerformed

    private void PFactionsInformationMenuitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PFactionsInformationMenuitemActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) PFtreeTree.getLastSelectedPathComponent();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) PFtreeTree.getModel().getRoot();

        String pfad = (String) node.getUserObject();
        ArrayList<String> info = new ArrayList<>();
        EasyData p = new EasyData();

        if (pfad.endsWith(".etp")) {

            pfad = getPathForCurrent();

            boolean notexisting = checkFile(pfad, ProjectHandler.TYPE_PROJECT);
            if (notexisting) {
                return;
            }

            meta = new MetaFrame(pfad);
            meta.setVisible(true);

        } else {

            boolean notexisting = checkFile((String) node.getUserObject(), ProjectHandler.TYPE_FILE);
            if (notexisting) {
                return;
            }
            info.add(pfad);
            info.add(messages.getString("FileType") + ": " + pfad.substring(pfad.lastIndexOf("."), pfad.length()));
            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");

            info.add(messages.getString("LastModified") + ": " + sdf.format(new File(pfad).lastModified()));

            String message = "";

            for (String s : info) {
                message = message + s + "\n";
            }

            JOptionPane.showMessageDialog(null, message, "Information", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(Easytranscript.class.getResource("Images/document-open-8_big.png")));

        }


    }//GEN-LAST:event_PFactionsInformationMenuitemActionPerformed

    private void PFactionsExportSingleMenuitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PFactionsExportSingleMenuitemActionPerformed

        File d;
        boolean failure = false;
        String s = getPathForCurrent();

        boolean notexisting = checkFile(s, ProjectHandler.TYPE_PROJECT);
        if (notexisting) {
            return;
        }

        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        chooser.setAcceptAllFileFilterUsed(false);

     //   chooser.setFileFilter(new FileNameExtensionFilter(messages.getString("rtfFiletype"), "rtf"));
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            d = chooser.getSelectedFile();
        } else {
            return;
        }

        EasyData p = new EasyData();
        try {
            p.load(new FileInputStream(s));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ProjectFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ProjectFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        String t = p.getProperty("transcriptName");
        File f;

        if (t != null) {
            if (!"".equals(t)) {

                String projectNameTmp = s.substring(s.lastIndexOf(System.getProperty("file.separator")) + 1, s.lastIndexOf("."));

                String projectDataS = s.substring(0, s.lastIndexOf(System.getProperty("file.separator")) + 1) + projectNameTmp + "_Data";
                f = new File(projectDataS + System.getProperty("file.separator") + t + ".rtf");
            } else {
                t = p.getProperty("transcriptPath");
                f = new File(t);
            }
        } else {
            t = p.getProperty("transcriptPath");
            f = new File(t);
        }
        try {
            FileUtils.copyFileToDirectory(f, d);
        } catch (IOException ex) {
            Logger.getLogger(ProjectFrame.class.getName()).log(Level.SEVERE, null, ex);
            failure = true;
        }

        if (failure) {
            JOptionPane.showMessageDialog(null, messages.getString("ProjectFolderCopyAllFailure"));
        }
    }//GEN-LAST:event_PFactionsExportSingleMenuitemActionPerformed

    private void PFhelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PFhelpButtonActionPerformed

        new Tools().browse("http://e-werkzeug.eu/software/easytranscript/versions/" + V.VERSION.getMajorVersion() + "." + V.VERSION.getMinorVersion() + "/help/" + currentLocale.getLanguage() + "/");
    }//GEN-LAST:event_PFhelpButtonActionPerformed

    private void PFinfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PFinfoButtonActionPerformed
        meta = new MetaFrame(projFolder.path);
        meta.setVisible(true);
    }//GEN-LAST:event_PFinfoButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        projFolder.close();
    }//GEN-LAST:event_formWindowClosing

    /**
     * Fügt ein Array files vom Typ type zur aktuellen Projektmappe hinzu. type
     * sollte einer der beiden Konstanten der Klasse ProjectFolder sein und
     * stellt dar, ob es sich um 3rdParty Dateien oder um easytranscript
     * Projekte handelt.
     *
     * @param files Array files welches hinzugefügt werden soll
     * @param type Der Typ der hinzuzufügenden Dateien
     */
    public static void addFilesToFolder(File[] files, String type) {
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) PFtreeTree.getModel().getRoot();
        int index;
        if (type.equals(ProjectHandler.TYPE_PROJECT)) {
            index = 0;
        } else {
            index = 1;
        }

        DefaultMutableTreeNode projects = ((DefaultMutableTreeNode) root.getChildAt(index));

        for (File f : files) {

            boolean prevent = false;
            for (int i = 0; i < projects.getChildCount(); i++) {
                prevent = ((String) ((DefaultMutableTreeNode) projects.getChildAt(i)).getUserObject()).equals(f.getAbsolutePath());

                if (prevent == true) {

                    break;
                }

            }

            if (!prevent) {
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(f.getName());
                node.setUserObject(f.getAbsolutePath().substring(f.getAbsolutePath().lastIndexOf(System.getProperty("file.separator")) + 1));
                projects.add(node);
            }
        }

        projFolder.add(files, type);
        projFolder.save();

        ((DefaultTreeModel) PFtreeTree.getModel()).reload();
    }

    public JTree getPFtreeTree() {
        return PFtreeTree;
    }

    public String getPathForCurrent() {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) PFtreeTree.getLastSelectedPathComponent();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) PFtreeTree.getModel().getRoot();
        DefaultMutableTreeNode projects = ((DefaultMutableTreeNode) root.getChildAt(0));

        String pfad = (String) node.getUserObject();

        if (pfad.endsWith(".etp")) {

            return projFolder.getList("project").get(projects.getIndex(node));
        } else {
            return pfad;
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem PFactionsAddFileMenuitem;
    private javax.swing.JMenuItem PFactionsAddTransMenuitem;
    private javax.swing.JMenuItem PFactionsDeleteMenuitem;
    private javax.swing.JMenuItem PFactionsExportSingleMenuitem;
    private javax.swing.JMenuItem PFactionsInformationMenuitem;
    private javax.swing.JPopupMenu PFactionsPopupmenu;
    private javax.swing.JButton PFaddFileButton;
    private javax.swing.JButton PFaddProjectButton;
    private javax.swing.JButton PFcopyAllButton;
    private javax.swing.JButton PFdeleteButton;
    private javax.swing.JButton PFhelpButton;
    private javax.swing.JButton PFinfoButton;
    private javax.swing.JPanel PFmainPanel;
    private javax.swing.JToolBar.Separator PFsep2Separator;
    private javax.swing.JToolBar.Separator PFsepSeparator;
    private javax.swing.JButton PFtimeButton;
    private javax.swing.JToolBar PFtoolsToolbar;
    private javax.swing.JScrollPane PFtreeScrollpane;
    private static javax.swing.JTree PFtreeTree;
    // End of variables declaration//GEN-END:variables

    private boolean checkFile(String string, String type) {

        File check = new File(string);
        if (!check.exists()) {
            projFolder.delete(check.getAbsolutePath(), type);
            JOptionPane.showMessageDialog(null, messages.getString("ProjectFolderNotExisting"), messages.getString("ProjectFolderNotExistingTitle"), JOptionPane.ERROR_MESSAGE);
            return true;
        }
        return false;
    }

}
