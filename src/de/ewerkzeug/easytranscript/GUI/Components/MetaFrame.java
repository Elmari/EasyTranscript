/*
 * Copyright (C) 2014 e-werkzeug <administrator@e-werkzeug.eu>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package de.ewerkzeug.easytranscript.GUI.Components;

import static de.ewerkzeug.easytranscript.Core.V.messages;
import de.ewerkzeug.easytranscript.IO.Data.EasyData;
import static de.ewerkzeug.easytranscript.IO.Data.TranscriptHandler.transcriptName;
import de.ewerkzeug.easytranscript.IO.Export.TableExport;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 *
 * @author e-werkzeug <administrator@e-werkzeug.eu>
 */
public class MetaFrame extends javax.swing.JFrame {

    String path = "";
    EasyData data;

    /**
     * Creates new form MetaFrame
     *
     * @param path
     */
    public MetaFrame(String path) {
        initComponents();
        this.path = path;
        this.setLocationRelativeTo(null);

        TableColumnModel cmodel = MetaInfoTable.getColumnModel();
        TextAreaRenderer textAreaRenderer = new TextAreaRenderer();

        cmodel.getColumn(1).setCellRenderer(textAreaRenderer);

        TextAreaEditor textEditor = new TextAreaEditor();
        cmodel.getColumn(1).setCellEditor(textEditor);

        load();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MetaPropertiesCombobox = new javax.swing.JComboBox();
        MetaInfoScrollpane = new javax.swing.JScrollPane();
        MetaInfoTable = new javax.swing.JTable()
        {

        };
        MetaBottomPanel = new javax.swing.JPanel();
        MetaOkButton = new javax.swing.JButton();
        MetaCancelButton = new javax.swing.JButton();
        MetaPrintExportPanel = new javax.swing.JPanel();
        MetaPrintButton = new javax.swing.JButton();
        MetaExportButton = new javax.swing.JButton();

        MetaPropertiesCombobox.setEditable(true);
        MetaPropertiesCombobox.addItem(messages.getString("MetaWann"));
        MetaPropertiesCombobox.addItem(messages.getString("MetaWo"));
        MetaPropertiesCombobox.addItem(messages.getString("MetaWieso"));
        MetaPropertiesCombobox.addItem(messages.getString("MetaMitWem"));
        MetaPropertiesCombobox.addItem(messages.getString("MetaPosition"));
        MetaPropertiesCombobox.addItem(messages.getString("MetaVonWem"));
        //MetaPropertiesCombobox.addItem(messages.getString("MetaNotiz"));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/ewerkzeug/easytranscript/Core/Bundles/Bundle"); // NOI18N
        setTitle(bundle.getString("Easytranscript.MainProjectInfosMenuitem.text")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        MetaInfoTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        MetaInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Eigenschaft", "Wert"
            }
        ));
        MetaInfoTable.setFocusable(false);
        MetaInfoTable.getTableHeader().setReorderingAllowed(false);
        MetaInfoScrollpane.setViewportView(MetaInfoTable);
        if (MetaInfoTable.getColumnModel().getColumnCount() > 0) {
            MetaInfoTable.getColumnModel().getColumn(0).setMinWidth(200);
            MetaInfoTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            MetaInfoTable.getColumnModel().getColumn(0).setMaxWidth(200);
            MetaInfoTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("Eigenschaft")); // NOI18N
            MetaInfoTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("Wert")); // NOI18N
        }
        TableColumn  c = MetaInfoTable.getColumnModel().getColumn(0);
        c.setCellEditor(new DefaultCellEditor(MetaPropertiesCombobox));

        MetaInfoTable.getModel().addTableModelListener(new TableModelListener() {
            @Override public void tableChanged(TableModelEvent e) {

                if (TableModelEvent.UPDATE == e.getType()) {

                    if (e.getLastRow()==(MetaInfoTable.getModel().getRowCount()-1)){
                        if (MetaInfoTable.getModel().getValueAt(e.getLastRow(), 0)!=null){
                            if (!MetaInfoTable.getModel().getValueAt(e.getLastRow(), 0).equals("")){

                                ((DefaultTableModel) MetaInfoTable.getModel()).setRowCount(MetaInfoTable.getModel().getRowCount()+1);

                            }
                        }
                    }
                }
            }
        });

        MetaOkButton.setText(bundle.getString("YotubeFrame.YtInfoOKButton.text")); // NOI18N
        MetaOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MetaOkButtonActionPerformed(evt);
            }
        });
        MetaBottomPanel.add(MetaOkButton);

        MetaCancelButton.setText(bundle.getString("StenoImportCancel")); // NOI18N
        MetaCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MetaCancelButtonActionPerformed(evt);
            }
        });
        MetaBottomPanel.add(MetaCancelButton);

        MetaPrintButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/document-print-5.png"))); // NOI18N
        MetaPrintButton.setText(bundle.getString("Easytranscript.ZeitPrintButton.text")); // NOI18N
        MetaPrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MetaPrintButtonActionPerformed(evt);
            }
        });
        MetaPrintExportPanel.add(MetaPrintButton);

        MetaExportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/document-export-4.png"))); // NOI18N
        MetaExportButton.setText(bundle.getString("Easytranscript.ZeitExportButton.text")); // NOI18N
        MetaExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MetaExportButtonActionPerformed(evt);
            }
        });
        MetaPrintExportPanel.add(MetaExportButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MetaBottomPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MetaInfoScrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(15, 15, 15))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(634, Short.MAX_VALUE)
                .addComponent(MetaPrintExportPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MetaPrintExportPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MetaInfoScrollpane)
                .addGap(19, 19, 19)
                .addComponent(MetaBottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MetaPrintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MetaPrintButtonActionPerformed

        String pN = "";

        if (transcriptName != null) {
            pN = "-" + transcriptName;
        }
        new printDocument(MetaInfoTable, "Information", "easytranscript" + pN).execute();
    }//GEN-LAST:event_MetaPrintButtonActionPerformed

    private void MetaExportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MetaExportButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Microsoft Excel 2007 (.xlsx)", "xlsx"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(messages.getString("odsFiletype"), "ods"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Text CSV (.csv)", "csv"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(messages.getString("htmlFiletype"), "html"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(messages.getString("pngFiletype"), "png"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Microsoft Excel 97/2000/XP (.xls)", "xls"));
        fileChooser.setAcceptAllFileFilterUsed(false);
        int ruckgabe = fileChooser.showSaveDialog(null);
        fileChooser.getSelectedFile();
        if (ruckgabe == JFileChooser.CANCEL_OPTION) {

            return;
        }
        String pathT = fileChooser.getSelectedFile().getAbsolutePath();

        if ((new File(pathT)).exists()) {
            int response = JOptionPane.showConfirmDialog(null, messages.getString("WarningOverwrite"), messages.getString("WarningOverwriteTitle"),
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.NO_OPTION) {

                MetaExportButtonActionPerformed(evt);
            } else if (response == JOptionPane.YES_OPTION) {
            } else if (response == JOptionPane.CLOSED_OPTION) {
                MetaExportButtonActionPerformed(evt);
            }
        }

        if (((FileNameExtensionFilter) fileChooser.getFileFilter()).getExtensions()[0].equals("ods")) {
            if (!pathT.endsWith((".ods"))) {
                pathT = pathT + ".ods";
            }
            TableExport.toXLS(pathT);
        }

        if (((FileNameExtensionFilter) fileChooser.getFileFilter()).getExtensions()[0].equals("csv")) {
            if (!pathT.endsWith((".csv"))) {
                pathT = pathT + ".csv";
            }
            TableExport.toCSV(pathT);
        }
        if (((FileNameExtensionFilter) fileChooser.getFileFilter()).getExtensions()[0].equals("xls")) {
            if (!pathT.endsWith((".xls"))) {
                pathT = pathT + ".xls";
            }
            TableExport.toXLS(pathT);
        }

        if (((FileNameExtensionFilter) fileChooser.getFileFilter()).getExtensions()[0].equals("xlsx")) {
            if (!pathT.endsWith((".xlsx"))) {
                pathT = pathT + ".xlsx";
            }
            TableExport.toXLSX(pathT);
        }

        if (((FileNameExtensionFilter) fileChooser.getFileFilter()).getExtensions()[0].equals("html")) {
            if (!pathT.endsWith((".html"))) {
                pathT = pathT + ".html";
            }
            TableExport.toHTML(pathT);
        }

        if (((FileNameExtensionFilter) fileChooser.getFileFilter()).getExtensions()[0].equals("png")) {
            if (!pathT.endsWith((".png"))) {
                pathT = pathT + ".png";
            }
            TableExport.toPNG(pathT);
        }
    }//GEN-LAST:event_MetaExportButtonActionPerformed

    private void MetaOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MetaOkButtonActionPerformed
        try {
            MetaInfoTable.getCellEditor().stopCellEditing();
        } catch (Exception e) {

        }

        TableModel model = MetaInfoTable.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {

            String left = "";
            String right = "";
            try {
                left = model.getValueAt(i, 0).toString();
                right = model.getValueAt(i, 1).toString();
                left = left.replaceAll("=", "");
                right = right.replaceAll("=", "");

                right = right.replaceAll("\\n", "\\\\n");

            } catch (Exception e) {

            }
            if (!left.equals("")) {
                data.setProperty("Meta", left, right);
            }

        }
        try {
            FileOutputStream fos = new FileOutputStream(path);
            data.store(fos, null);
            fos.close();
        } catch (IOException ex) {
            Logger.getLogger(MetaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        dispose();
    }//GEN-LAST:event_MetaOkButtonActionPerformed

    private void MetaCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MetaCancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_MetaCancelButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        dispose();
    }//GEN-LAST:event_formWindowClosing

    private void load() {

        DefaultTableModel model = (DefaultTableModel) MetaInfoTable.getModel();
        ArrayList<String[]> list = null;
        try {
            data = new EasyData();
            FileInputStream fis = new FileInputStream(path);
            data.load(fis);
            fis.close();
            list = data.getAllPairs("Meta");
        } catch (IOException ex) {
            Logger.getLogger(MetaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (list == null) {
            model.setRowCount(1);
            return;
        }
        model.setRowCount(list.size() + 1);
        for (int i = 0; i < list.size(); i++) {
            model.setValueAt(list.get(i)[0], i, 0);
            model.setValueAt(list.get(i)[1].replace("\\n", "\n"), i, 1);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MetaBottomPanel;
    private javax.swing.JButton MetaCancelButton;
    private javax.swing.JButton MetaExportButton;
    private javax.swing.JScrollPane MetaInfoScrollpane;
    private javax.swing.JTable MetaInfoTable;
    private javax.swing.JButton MetaOkButton;
    private javax.swing.JButton MetaPrintButton;
    private javax.swing.JPanel MetaPrintExportPanel;
    private javax.swing.JComboBox MetaPropertiesCombobox;
    // End of variables declaration//GEN-END:variables
}
