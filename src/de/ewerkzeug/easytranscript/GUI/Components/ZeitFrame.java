/*
 * Copyright (C) 2014 e-werkzeug <administrator@e-werkzeug.eu>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package de.ewerkzeug.easytranscript.GUI.Components;

import de.ewerkzeug.easytranscript.Core.ErrorReport;
import de.ewerkzeug.easytranscript.Core.V;
import static de.ewerkzeug.easytranscript.Core.V.currentLocale;
import static de.ewerkzeug.easytranscript.Core.V.errors;
import static de.ewerkzeug.easytranscript.Core.V.messages;
import static de.ewerkzeug.easytranscript.Core.V.workTime;
import static de.ewerkzeug.easytranscript.Core.V.zeitFrame;
import static de.ewerkzeug.easytranscript.IO.Data.TranscriptHandler.transConf;
import static de.ewerkzeug.easytranscript.IO.Data.TranscriptHandler.transcriptName;
import static de.ewerkzeug.easytranscript.IO.Data.TranscriptHandler.transcriptPath;
import de.ewerkzeug.easytranscript.IO.Export.TableExport;
import de.ewerkzeug.easytranscript.Tools.Tools;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.NumberFormat;
import java.util.Currency;
import java.util.Locale;
import java.util.Scanner;
import java.util.logging.Level;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author e-werkzeug <administrator@e-werkzeug.eu>
 */
public class ZeitFrame extends javax.swing.JFrame {

    Locale[] locales = {Locale.GERMANY, Locale.US, Locale.CANADA, Locale.CHINA, Locale.JAPAN, Locale.KOREA, Locale.TAIWAN, Locale.UK};

    /**
     * Creates new form ZeitFrame
     */
    public ZeitFrame() {
        initComponents();

        for (Locale l : locales) {
            Currency currency = Currency.getInstance(l);
            ZeitHourlyCurrencyCombobox.addItem(currency.getCurrencyCode());
            ZeitFixCurrencyCombobox.addItem(currency.getCurrencyCode());
        }

        setLocationRelativeTo(null);
        ZeitTableTable.setComponentPopupMenu(ZeitPopup);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ZeitSep1 = new javax.swing.JSeparator();
        ZeitPopup = new javax.swing.JPopupMenu();
        ZeitDeleteSingleMenuItem = new javax.swing.JMenuItem();
        ZeitTopPanel = new javax.swing.JPanel();
        ZeitActivateCheckbox = new javax.swing.JCheckBox();
        ZeitMainPanel = new javax.swing.JPanel();
        ZeitMainButtonPanel = new javax.swing.JPanel();
        ZeitPrintButton = new javax.swing.JButton();
        ZeitExportButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        ZeitDeleteAllButton = new javax.swing.JButton();
        ZeitMainTablePanel = new javax.swing.JPanel();
        ZeitTableScrollpane = new javax.swing.JScrollPane();
        ZeitTableTable = new javax.swing.JTable();
        ZeitTotalLabel = new javax.swing.JLabel();
        ZeitBottomPanel = new javax.swing.JPanel();
        ZeitCloseButton = new javax.swing.JButton();
        ZeitMoneyPanel = new javax.swing.JPanel();
        ZeitWagePanel = new javax.swing.JPanel();
        ZeitFixSpinner = new javax.swing.JSpinner();
        ZeitFixCurrencyCombobox = new javax.swing.JComboBox();
        ZeitFixRadiobutton = new javax.swing.JRadioButton();
        ZeitHourlySpinner = new javax.swing.JSpinner();
        ZeitHourlyCurrencyCombobox = new javax.swing.JComboBox();
        ZeitHourlyRadiobutton = new javax.swing.JRadioButton();
        ZeitResultPanel = new javax.swing.JPanel();
        ZeitWageLabel = new javax.swing.JLabel();
        ZeitWageValueLabel = new javax.swing.JLabel();
        ZeitHelpButton = new javax.swing.JButton();

        ZeitDeleteSingleMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/edit-delete-4.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/ewerkzeug/easytranscript/Core/Bundles/Bundle"); // NOI18N
        ZeitDeleteSingleMenuItem.setText(bundle.getString("Easytranscript.PFactionsDeleteMenuitem.text")); // NOI18N
        ZeitDeleteSingleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZeitDeleteSingleMenuItemActionPerformed(evt);
            }
        });
        ZeitPopup.add(ZeitDeleteSingleMenuItem);

        setTitle(bundle.getString("Easytranscript.MaintimeMenuitem.text")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ZeitActivateCheckbox.setSelected(true);
        ZeitActivateCheckbox.setText(bundle.getString("Easytranscript.ZeitActivateCheckbox.text")); // NOI18N
        ZeitActivateCheckbox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ZeitActivateCheckboxStateChanged(evt);
            }
        });
        ZeitActivateCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZeitActivateCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ZeitTopPanelLayout = new javax.swing.GroupLayout(ZeitTopPanel);
        ZeitTopPanel.setLayout(ZeitTopPanelLayout);
        ZeitTopPanelLayout.setHorizontalGroup(
            ZeitTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ZeitTopPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ZeitActivateCheckbox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ZeitTopPanelLayout.setVerticalGroup(
            ZeitTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ZeitTopPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(ZeitActivateCheckbox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ZeitPrintButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/document-print-5.png"))); // NOI18N
        ZeitPrintButton.setText(bundle.getString("Easytranscript.ZeitPrintButton.text")); // NOI18N
        ZeitPrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZeitPrintButtonActionPerformed(evt);
            }
        });
        ZeitMainButtonPanel.add(ZeitPrintButton);

        ZeitExportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/document-export-4.png"))); // NOI18N
        ZeitExportButton.setText(bundle.getString("Easytranscript.ZeitExportButton.text")); // NOI18N
        ZeitExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZeitExportButtonActionPerformed(evt);
            }
        });
        ZeitMainButtonPanel.add(ZeitExportButton);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setPreferredSize(new java.awt.Dimension(3, 20));
        ZeitMainButtonPanel.add(jSeparator2);

        ZeitDeleteAllButton.setText(bundle.getString("delete")); // NOI18N
        ZeitDeleteAllButton.setMaximumSize(new java.awt.Dimension(85, 25));
        ZeitDeleteAllButton.setMinimumSize(new java.awt.Dimension(85, 25));
        ZeitDeleteAllButton.setPreferredSize(new java.awt.Dimension(85, 25));
        ZeitDeleteAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZeitDeleteAllButtonActionPerformed(evt);
            }
        });
        ZeitMainButtonPanel.add(ZeitDeleteAllButton);

        ZeitTableTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Von", "Bis", "Dauer"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ZeitTableTable.getTableHeader().setReorderingAllowed(false);
        ZeitTableScrollpane.setViewportView(ZeitTableTable);
        if (ZeitTableTable.getColumnModel().getColumnCount() > 0) {
            ZeitTableTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("Von")); // NOI18N
            ZeitTableTable.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("Bis")); // NOI18N
            ZeitTableTable.getColumnModel().getColumn(3).setHeaderValue(bundle.getString("Dauer")); // NOI18N
        }

        javax.swing.GroupLayout ZeitMainTablePanelLayout = new javax.swing.GroupLayout(ZeitMainTablePanel);
        ZeitMainTablePanel.setLayout(ZeitMainTablePanelLayout);
        ZeitMainTablePanelLayout.setHorizontalGroup(
            ZeitMainTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ZeitMainTablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ZeitTableScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                .addContainerGap())
        );
        ZeitMainTablePanelLayout.setVerticalGroup(
            ZeitMainTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ZeitMainTablePanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(ZeitTableScrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE))
        );

        ZeitTotalLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ZeitTotalLabel.setText(bundle.getString("Easytranscript.ZeitTotalLabel.text")); // NOI18N

        javax.swing.GroupLayout ZeitMainPanelLayout = new javax.swing.GroupLayout(ZeitMainPanel);
        ZeitMainPanel.setLayout(ZeitMainPanelLayout);
        ZeitMainPanelLayout.setHorizontalGroup(
            ZeitMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ZeitMainTablePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(ZeitMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ZeitMainButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ZeitTotalLabel)
                .addContainerGap())
        );
        ZeitMainPanelLayout.setVerticalGroup(
            ZeitMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ZeitMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ZeitMainTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ZeitMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ZeitMainButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ZeitTotalLabel))
                .addGap(34, 34, 34))
        );

        ZeitCloseButton.setText(bundle.getString("Easytranscript.ZeitCloseButton.text")); // NOI18N
        ZeitCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZeitCloseButtonActionPerformed(evt);
            }
        });
        ZeitBottomPanel.add(ZeitCloseButton);

        ZeitFixSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0f, 0.0f, null, 0.1f));
        ZeitFixSpinner.setEnabled(false);
        ZeitFixSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ZeitFixSpinnerStateChanged(evt);
            }
        });

        ZeitFixCurrencyCombobox.setEnabled(false);
        ZeitFixCurrencyCombobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ZeitFixCurrencyComboboxItemStateChanged(evt);
            }
        });

        ZeitFixRadiobutton.setText(bundle.getString("Easytranscript.ZeitFixRadiobutton.text")); // NOI18N
        ZeitFixRadiobutton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ZeitFixRadiobuttonStateChanged(evt);
            }
        });

        ZeitHourlySpinner.setModel(new javax.swing.SpinnerNumberModel(0.0f, 0.0f, null, 0.1f));
        ZeitHourlySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ZeitHourlySpinnerStateChanged(evt);
            }
        });

        ZeitHourlyCurrencyCombobox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ZeitHourlyCurrencyComboboxItemStateChanged(evt);
            }
        });

        ZeitHourlyRadiobutton.setSelected(true);
        ZeitHourlyRadiobutton.setText(bundle.getString("Easytranscript.ZeitHourlyRadiobutton.text")); // NOI18N
        ZeitHourlyRadiobutton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ZeitHourlyRadiobuttonStateChanged(evt);
            }
        });

        javax.swing.GroupLayout ZeitWagePanelLayout = new javax.swing.GroupLayout(ZeitWagePanel);
        ZeitWagePanel.setLayout(ZeitWagePanelLayout);
        ZeitWagePanelLayout.setHorizontalGroup(
            ZeitWagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ZeitWagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ZeitWagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ZeitWagePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(ZeitWagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ZeitFixRadiobutton)
                            .addGroup(ZeitWagePanelLayout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(ZeitWagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ZeitWagePanelLayout.createSequentialGroup()
                                        .addComponent(ZeitHourlySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(ZeitHourlyCurrencyCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ZeitWagePanelLayout.createSequentialGroup()
                                        .addComponent(ZeitFixSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(ZeitFixCurrencyCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(9, 9, 9))
                    .addGroup(ZeitWagePanelLayout.createSequentialGroup()
                        .addComponent(ZeitHourlyRadiobutton, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        ZeitWagePanelLayout.setVerticalGroup(
            ZeitWagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ZeitWagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ZeitHourlyRadiobutton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(ZeitWagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ZeitHourlySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ZeitHourlyCurrencyCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(ZeitFixRadiobutton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ZeitWagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ZeitFixSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ZeitFixCurrencyCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        ZeitWageLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ZeitWageLabel.setText(bundle.getString("Easytranscript.ZeitWageLabel.text")); // NOI18N

        ZeitWageValueLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ZeitWageValueLabel.setText(bundle.getString("Easytranscript.ZeitWageValueLabel.text")); // NOI18N

        javax.swing.GroupLayout ZeitResultPanelLayout = new javax.swing.GroupLayout(ZeitResultPanel);
        ZeitResultPanel.setLayout(ZeitResultPanelLayout);
        ZeitResultPanelLayout.setHorizontalGroup(
            ZeitResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ZeitResultPanelLayout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(ZeitWageValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(133, 133, 133))
            .addGroup(ZeitResultPanelLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(ZeitWageLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ZeitResultPanelLayout.setVerticalGroup(
            ZeitResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ZeitResultPanelLayout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addComponent(ZeitWageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ZeitWageValueLabel))
        );

        javax.swing.GroupLayout ZeitMoneyPanelLayout = new javax.swing.GroupLayout(ZeitMoneyPanel);
        ZeitMoneyPanel.setLayout(ZeitMoneyPanelLayout);
        ZeitMoneyPanelLayout.setHorizontalGroup(
            ZeitMoneyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ZeitMoneyPanelLayout.createSequentialGroup()
                .addComponent(ZeitWagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ZeitResultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        ZeitMoneyPanelLayout.setVerticalGroup(
            ZeitMoneyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ZeitMoneyPanelLayout.createSequentialGroup()
                .addComponent(ZeitWagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(ZeitMoneyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ZeitResultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ZeitHelpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/help-hint.png"))); // NOI18N
        ZeitHelpButton.setToolTipText(bundle.getString("Easytranscript.MainhelpMenuitem.text")); // NOI18N
        ZeitHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZeitHelpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ZeitMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(ZeitBottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ZeitMoneyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ZeitTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ZeitHelpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ZeitTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ZeitHelpButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ZeitMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ZeitMoneyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(ZeitBottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ZeitActivateCheckboxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ZeitActivateCheckboxStateChanged

    }//GEN-LAST:event_ZeitActivateCheckboxStateChanged

    private void ZeitPrintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZeitPrintButtonActionPerformed

        String pN = "";

        if (transcriptName != null) {
            pN = "-" + transcriptName;
        }
        new printDocument(ZeitTableTable, getZeitTotalLabel().getText(), "easytranscript" + pN).execute();

    }//GEN-LAST:event_ZeitPrintButtonActionPerformed

    private void ZeitExportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZeitExportButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Microsoft Excel 2007 (.xlsx)", "xlsx"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(messages.getString("odsFiletype"), "ods"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Text CSV (.csv)", "csv"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(messages.getString("htmlFiletype"), "html"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(messages.getString("pngFiletype"), "png"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Microsoft Excel 97/2000/XP (.xls)", "xls"));
        fileChooser.setAcceptAllFileFilterUsed(false);
        int ruckgabe = fileChooser.showSaveDialog(null);
        fileChooser.getSelectedFile();
        if (ruckgabe == JFileChooser.CANCEL_OPTION) {

            return;
        }
        String path = fileChooser.getSelectedFile().getAbsolutePath();

        if ((new File(path)).exists()) {
            int response = JOptionPane.showConfirmDialog(null, messages.getString("WarningOverwrite"), messages.getString("WarningOverwriteTitle"),
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.NO_OPTION) {

                ZeitExportButtonActionPerformed(evt);
            } else if (response == JOptionPane.YES_OPTION) {
            } else if (response == JOptionPane.CLOSED_OPTION) {
                ZeitExportButtonActionPerformed(evt);
            }
        }

        if (((FileNameExtensionFilter) fileChooser.getFileFilter()).getExtensions()[0].equals("ods")) {
            if (!path.endsWith((".ods"))) {
                path = path + ".ods";
            }
            TableExport.toXLS(path);
        }

        if (((FileNameExtensionFilter) fileChooser.getFileFilter()).getExtensions()[0].equals("csv")) {
            if (!path.endsWith((".csv"))) {
                path = path + ".csv";
            }
            TableExport.toCSV(path);
        }
        if (((FileNameExtensionFilter) fileChooser.getFileFilter()).getExtensions()[0].equals("xls")) {
            if (!path.endsWith((".xls"))) {
                path = path + ".xls";
            }
            TableExport.toXLS(path);
        }

        if (((FileNameExtensionFilter) fileChooser.getFileFilter()).getExtensions()[0].equals("xlsx")) {
            if (!path.endsWith((".xlsx"))) {
                path = path + ".xlsx";
            }
            TableExport.toXLSX(path);
        }

        if (((FileNameExtensionFilter) fileChooser.getFileFilter()).getExtensions()[0].equals("html")) {
            if (!path.endsWith((".html"))) {
                path = path + ".html";
            }
            TableExport.toHTML(path);
        }

        if (((FileNameExtensionFilter) fileChooser.getFileFilter()).getExtensions()[0].equals("png")) {
            if (!path.endsWith((".png"))) {
                path = path + ".png";
            }
            TableExport.toPNG(path);
        }
    }//GEN-LAST:event_ZeitExportButtonActionPerformed

    private void ZeitCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZeitCloseButtonActionPerformed
        workTime.closeWorkTimeWindow();
    }//GEN-LAST:event_ZeitCloseButtonActionPerformed

    private void ZeitFixSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ZeitFixSpinnerStateChanged
        String s = ZeitTotalLabel.getText();
        if (s.contains(",")) {
            String s2;
            String s4;
            Scanner scanner = new Scanner(s);
            scanner.next();
            s2 = scanner.next();
            scanner.next();
            s4 = scanner.next();

            int hours = Integer.valueOf(s2);
            int minutes = Integer.valueOf(s4);

            int gesamt = hours * 60 + minutes;
            updateWage(false, gesamt);
        }
    }//GEN-LAST:event_ZeitFixSpinnerStateChanged

    private void ZeitFixCurrencyComboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ZeitFixCurrencyComboboxItemStateChanged
        String s = ZeitTotalLabel.getText();
        if (s.contains(",")) {
            String s2;
            String s4;
            Scanner scanner = new Scanner(s);
            scanner.next();
            s2 = scanner.next();
            scanner.next();
            s4 = scanner.next();

            int hours = Integer.valueOf(s2);
            int minutes = Integer.valueOf(s4);

            int gesamt = hours * 60 + minutes;
            updateWage(false, gesamt);
        }
    }//GEN-LAST:event_ZeitFixCurrencyComboboxItemStateChanged

    private void ZeitFixRadiobuttonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ZeitFixRadiobuttonStateChanged
        ZeitHourlyRadiobutton.setSelected(!ZeitFixRadiobutton.isSelected());
        ZeitHourlySpinner.setEnabled(!ZeitFixRadiobutton.isSelected());
        ZeitHourlyCurrencyCombobox.setEnabled(!ZeitFixRadiobutton.isSelected());

        if (ZeitFixRadiobutton.isSelected()) {
            this.ZeitFixSpinnerStateChanged(null);
            this.ZeitFixCurrencyComboboxItemStateChanged(null);

        }
    }//GEN-LAST:event_ZeitFixRadiobuttonStateChanged

    private void ZeitHourlySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ZeitHourlySpinnerStateChanged
        String s = ZeitTotalLabel.getText();

        if (s.contains(",")) {
            String s2;
            String s4;
//            if (s.contains(":")){
            s = s.substring(s.indexOf(":") + 1);
//            }
            Scanner scanner = new Scanner(s);
//                scanner.next();
            s2 = scanner.next();
            scanner.next();
            s4 = scanner.next();

            int hours = Integer.valueOf(s2);
            int minutes = Integer.valueOf(s4);

            int gesamt = hours * 60 + minutes;
            updateWage(true, gesamt);
        }

    }//GEN-LAST:event_ZeitHourlySpinnerStateChanged

    private void ZeitHourlyCurrencyComboboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ZeitHourlyCurrencyComboboxItemStateChanged
        String s = ZeitTotalLabel.getText();
        if (s.contains(",")) {
            String s2;
            String s4;
            Scanner scanner = new Scanner(s);
            scanner.next();
            s2 = scanner.next();
            scanner.next();
            s4 = scanner.next();

            int hours = Integer.valueOf(s2);
            int minutes = Integer.valueOf(s4);

            int gesamt = hours * 60 + minutes;
            updateWage(true, gesamt);
        }
    }//GEN-LAST:event_ZeitHourlyCurrencyComboboxItemStateChanged

    private void ZeitHourlyRadiobuttonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ZeitHourlyRadiobuttonStateChanged
        ZeitFixRadiobutton.setSelected(!ZeitHourlyRadiobutton.isSelected());
        ZeitFixSpinner.setEnabled(!ZeitHourlyRadiobutton.isSelected());
        ZeitFixCurrencyCombobox.setEnabled(!ZeitHourlyRadiobutton.isSelected());
        if (ZeitHourlyRadiobutton.isSelected()) {
            this.ZeitHourlyCurrencyComboboxItemStateChanged(null);

            this.ZeitHourlySpinnerStateChanged(null);

        }
    }//GEN-LAST:event_ZeitHourlyRadiobuttonStateChanged

    private void ZeitHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZeitHelpButtonActionPerformed

        new Tools().browse("http://e-werkzeug.eu/software/easytranscript/versions/" + V.VERSION.getMajorVersion() + "." + V.VERSION.getMinorVersion() + "/help/" + currentLocale.getLanguage() + "/");
    }//GEN-LAST:event_ZeitHelpButtonActionPerformed

    private void ZeitActivateCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZeitActivateCheckboxActionPerformed
        if (isVisible()) {
            if (workTime.getRecordingTime() == true) {
                workTime.endCurrentWorkTimeEntry();
                workTime.setRecordingTime(false);
            }
        }
        ZeitTableTable.setEnabled(ZeitActivateCheckbox.isSelected());

        ZeitPrintButton.setEnabled(ZeitActivateCheckbox.isSelected());

        ZeitExportButton.setEnabled(ZeitActivateCheckbox.isSelected());

        ZeitWageLabel.setEnabled(ZeitActivateCheckbox.isSelected());
        ZeitWageValueLabel.setEnabled(ZeitActivateCheckbox.isSelected());

        if (ZeitActivateCheckbox.isSelected() == false) {
            ZeitFixRadiobutton.setEnabled(false);
            ZeitHourlyRadiobutton.setEnabled(false);
            ZeitFixSpinner.setEnabled(false);
            ZeitFixCurrencyCombobox.setEnabled(false);
            ZeitHourlySpinner.setEnabled(false);
            ZeitHourlyCurrencyCombobox.setEnabled(false);
        } else {
            ZeitFixRadiobutton.setEnabled(true);
            ZeitHourlyRadiobutton.setEnabled(true);

            if (ZeitFixRadiobutton.isSelected()) {
                ZeitFixSpinner.setEnabled(true);
                ZeitFixCurrencyCombobox.setEnabled(true);
            } else {
                ZeitHourlySpinner.setEnabled(true);
                ZeitHourlyCurrencyCombobox.setEnabled(true);
            }
        }

        try {

            transConf.setProperty("PPorganizeTime", Boolean.toString(ZeitActivateCheckbox.isSelected()));
            FileOutputStream fos = new FileOutputStream(transcriptPath);
            transConf.store(fos, null);

        } catch (IOException e) {
            V.logger.log(Level.SEVERE, new ErrorReport().show(errors.getString("SavingConfig")), e);

        }

    }//GEN-LAST:event_ZeitActivateCheckboxActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        workTime.closeWorkTimeWindow();
    }//GEN-LAST:event_formWindowClosing

    private void ZeitDeleteAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZeitDeleteAllButtonActionPerformed

        int n = JOptionPane.showOptionDialog(null, messages.getString("ZeitDelete"), messages.getString("ZeitDeleteTitle"), JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, new Object[]{messages.getString("Ja"), messages.getString("Nein")}, messages.getString("Nein"));

        if (n == JOptionPane.YES_OPTION) {
            workTime.clear();
            ZeitActivateCheckboxActionPerformed(null);

            new File(transcriptPath.substring(0, transcriptPath.lastIndexOf(".")) + "_Data/default.arbeitszeit").delete();
            ((DefaultTableModel) ZeitTableTable.getModel()).setRowCount(0);
        }
    }//GEN-LAST:event_ZeitDeleteAllButtonActionPerformed

    private void ZeitDeleteSingleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZeitDeleteSingleMenuItemActionPerformed
        int n = ZeitTableTable.getSelectedRow();

        if (n == -1) {
            ZeitDeleteAllButtonActionPerformed(null);

        } else {
            int a = JOptionPane.showConfirmDialog(null, messages.getString("TimeDeleteRow"), messages.getString("TimeDeleteRowTitle"), JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (a == JOptionPane.YES_OPTION) {
                int lengthT = Integer.parseInt(workTime.getProperty("length"));
                workTime.endCurrentWorkTimeEntry();
                workTime.deleteWorkTimeEntry(n + 1);
                for (int c = 1; c <= lengthT; c++) {
                    workTime.closeWorkTimeGaps(lengthT);
                }
                String l = String.valueOf(lengthT - 1);
                workTime.setProperty("length", l);

                workTime.saveWorkTimeByProjectPath("default");
                workTime.loadWorkTime();
                zeitFrame.setVisible(true);
            }
        }
    }//GEN-LAST:event_ZeitDeleteSingleMenuItemActionPerformed

    /**
     * Updated die Lohnanzeige, nach Bedarf auf Stundenbasis
     *
     * @param stundenbasis Lohnanzeige nach Stundenbasis updaten oder nicht
     * @param total Totaler Minutenwert
     */
    private void updateWage(boolean stundenbasis, int total) {
        Locale locale;
        double value;
        String problematicCurrency = "";
        if (stundenbasis) {

            locale = locales[ZeitHourlyCurrencyCombobox.getSelectedIndex()];
            value = Double.valueOf(ZeitHourlySpinner.getValue().toString());
            if (ZeitHourlyCurrencyCombobox.getSelectedIndex() == 4 || ZeitHourlyCurrencyCombobox.getSelectedIndex() == 3) {
                problematicCurrency = "\u00A5";
            }
            if (ZeitHourlyCurrencyCombobox.getSelectedIndex() == 5) {
                problematicCurrency = "\u20A9";
            }

        } else {
            locale = locales[ZeitFixCurrencyCombobox.getSelectedIndex()];
            value = Double.valueOf(ZeitFixSpinner.getValue().toString());
        }

        float div = total / 60f;

        double ergebnis;
        if (stundenbasis) {
            ergebnis = (double) value * div;
        } else {
            ergebnis = (double) value;
        }
        NumberFormat currencyFormatter
                = NumberFormat.getCurrencyInstance(locale);

        String ergebnisS = currencyFormatter.format(ergebnis);
        if (!problematicCurrency.equals("")) {
            ergebnisS = ergebnisS.replace(String.valueOf(Character.toChars(Character.codePointAt(ergebnisS, 0))), problematicCurrency);
        }

        ZeitWageValueLabel.setText(ergebnisS);

    }

    public JCheckBox getZeitActivateCheckbox() {
        return ZeitActivateCheckbox;
    }

    public JComboBox getZeitFixCurrencyCombobox() {
        return ZeitFixCurrencyCombobox;
    }

    public JRadioButton getZeitFixRadiobutton() {
        return ZeitFixRadiobutton;
    }

    public JSpinner getZeitFixSpinner() {
        return ZeitFixSpinner;
    }

    public JComboBox getZeitHourlyCurrencyCombobox() {
        return ZeitHourlyCurrencyCombobox;
    }

    public JRadioButton getZeitHourlyRadiobutton() {
        return ZeitHourlyRadiobutton;
    }

    public JSpinner getZeitHourlySpinner() {
        return ZeitHourlySpinner;
    }

    public JTable getZeitTableTable() {
        return ZeitTableTable;
    }

    public JLabel getZeitTotalLabel() {
        return ZeitTotalLabel;
    }

    public JScrollPane getZeitTableScrollpane() {
        return ZeitTableScrollpane;
    }

    public JButton getZeitDeleteAllButton() {
        return ZeitDeleteAllButton;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ZeitActivateCheckbox;
    private javax.swing.JPanel ZeitBottomPanel;
    private javax.swing.JButton ZeitCloseButton;
    private javax.swing.JButton ZeitDeleteAllButton;
    private javax.swing.JMenuItem ZeitDeleteSingleMenuItem;
    private javax.swing.JButton ZeitExportButton;
    private javax.swing.JComboBox ZeitFixCurrencyCombobox;
    private javax.swing.JRadioButton ZeitFixRadiobutton;
    private javax.swing.JSpinner ZeitFixSpinner;
    private javax.swing.JButton ZeitHelpButton;
    private javax.swing.JComboBox ZeitHourlyCurrencyCombobox;
    private javax.swing.JRadioButton ZeitHourlyRadiobutton;
    private javax.swing.JSpinner ZeitHourlySpinner;
    private javax.swing.JPanel ZeitMainButtonPanel;
    private javax.swing.JPanel ZeitMainPanel;
    private javax.swing.JPanel ZeitMainTablePanel;
    private javax.swing.JPanel ZeitMoneyPanel;
    private javax.swing.JPopupMenu ZeitPopup;
    private javax.swing.JButton ZeitPrintButton;
    private javax.swing.JPanel ZeitResultPanel;
    private javax.swing.JSeparator ZeitSep1;
    private javax.swing.JScrollPane ZeitTableScrollpane;
    private javax.swing.JTable ZeitTableTable;
    private javax.swing.JPanel ZeitTopPanel;
    private javax.swing.JLabel ZeitTotalLabel;
    private javax.swing.JLabel ZeitWageLabel;
    private javax.swing.JPanel ZeitWagePanel;
    private javax.swing.JLabel ZeitWageValueLabel;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
