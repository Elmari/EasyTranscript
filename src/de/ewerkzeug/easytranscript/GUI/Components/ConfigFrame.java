/*
 * Copyright (C) 2014 e-werkzeug <administrator@e-werkzeug.eu>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package de.ewerkzeug.easytranscript.GUI.Components;

import com.melloware.jintellitype.JIntellitype;
import static de.ewerkzeug.easytranscript.Core.Easytranscript.SystemWideKeyWasActive;
import de.ewerkzeug.easytranscript.Core.ErrorReport;
import de.ewerkzeug.easytranscript.Core.V;
import static de.ewerkzeug.easytranscript.Core.V.backupTimer;
import static de.ewerkzeug.easytranscript.Core.V.currentLocale;
import static de.ewerkzeug.easytranscript.Core.V.easytranscript;
import static de.ewerkzeug.easytranscript.Core.V.errors;
import static de.ewerkzeug.easytranscript.Core.V.messages;
import static de.ewerkzeug.easytranscript.Core.V.opFolder;
import static de.ewerkzeug.easytranscript.Core.V.prop;
import static de.ewerkzeug.easytranscript.Core.V.steno;
import de.ewerkzeug.easytranscript.GUI.Misc.JTextfieldLimit;
import de.ewerkzeug.easytranscript.GUI.Misc.TrimmedCellEditor;
import de.ewerkzeug.easytranscript.Tools.Tools;
import static de.ewerkzeug.easytranscript.Tools.Tools.checkOp;
import static de.ewerkzeug.easytranscript.Tools.Tools.getOS;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import jxgrabkey.JXGrabKey;

/**
 *
 * @author e-werkzeug <administrator@e-werkzeug.eu>
 */
public class ConfigFrame extends javax.swing.JFrame {

    private final boolean[] playerButtonsConfCbHasFocus = new boolean[3];

    /**
     * Creates new form ConfigFrame
     */
    public ConfigFrame() {
        initComponents();
        // updateAvailKeys();
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        ConfigMainPanel = new javax.swing.JPanel();
        ConfigButtonPanel = new javax.swing.JPanel();
        ConfigSaveButton = new javax.swing.JButton();
        ConfigResetButton = new javax.swing.JButton();
        ConfigCancelButton = new javax.swing.JButton();
        ConfigHelpButton = new javax.swing.JButton();
        ConfigKategorienTabbedPane = new javax.swing.JTabbedPane();
        ConfigEditorPanel = new javax.swing.JPanel();
        ConfigTimestampsLabel = new javax.swing.JLabel();
        ConfigTimestampsActiveCheckbox = new javax.swing.JCheckBox();
        ConfigTimestampsBeginningCheckbox = new javax.swing.JCheckBox();
        ConfigPassageCheckbox = new javax.swing.JCheckBox();
        ConfigCOSLabel = new javax.swing.JLabel();
        ConfigCOSCheckbox = new javax.swing.JCheckBox();
        ConfigCOSInterviewerTextfield = new javax.swing.JTextField();
        ConfigCOSPersonTextfield = new javax.swing.JTextField();
        ConfigBackupLabel = new javax.swing.JLabel();
        ConfigCreateBackupCheckbox = new javax.swing.JCheckBox();
        ConfigBackupMinutesSpinner = new javax.swing.JSpinner();
        ConfigBackupMinutesLabel = new javax.swing.JLabel();
        ConfigCOSBoldCheckbox = new javax.swing.JCheckBox();
        ConfigTimestampsEndingCheckbox = new javax.swing.JCheckBox();
        ConfigSuggestionsLabel = new javax.swing.JLabel();
        ConfigSuggestionsCheckbox = new javax.swing.JCheckBox();
        ConfigPerformanceModeCheckbox = new javax.swing.JCheckBox();
        ConfigPerformanceLabel = new javax.swing.JLabel();
        ConfigPerformanceTitleLabel = new javax.swing.JLabel();
        ConfigPlayerPanel = new javax.swing.JPanel();
        ConfigKeymappingLabel = new javax.swing.JLabel();
        ConfigWindBackTextfield = new javax.swing.JTextField();
        ConfigPlayTextfield = new javax.swing.JTextField();
        ConfigFastForwardTextfield = new javax.swing.JTextField();
        ConfigFastForwardCombobox = new javax.swing.JComboBox();
        ConfigWindBackCombobox = new javax.swing.JComboBox();
        ConfigPlayCombobox = new javax.swing.JComboBox();
        ConfigPlayerSystemWideCheckbox = new javax.swing.JCheckBox();
        ConfigUseFXPLayerCheckbox = new javax.swing.JCheckBox();
        ConfigUseFXPlayerScrollpane = new javax.swing.JScrollPane();
        ConfigUseFXPlayerTextArea = new javax.swing.JTextArea();
        ConfigTextbausteinePanel = new javax.swing.JPanel();
        ConfigTextModuleLabel = new javax.swing.JLabel();
        ConfigPassageLabel = new javax.swing.JLabel();
        ConfigTextbausteineLRPanel = new javax.swing.JPanel();
        ConfigTextbausteineLeftPanel = new javax.swing.JPanel();
        ConfigKM1Textfield = new javax.swing.JTextField();
        ConfigTM1Textfield = new JTextfieldLimit(30);
        ConfigKM2Textfield = new javax.swing.JTextField();
        ConfigTM2Textfield = new JTextfieldLimit(30);
        ConfigKM3Textfield = new javax.swing.JTextField();
        ConfigTM3Textfield = new JTextfieldLimit(30);
        ConfigKM4Textfield = new javax.swing.JTextField();
        ConfigTM4Textfield = new JTextfieldLimit(30);
        ConfigKM5Textfield = new javax.swing.JTextField();
        ConfigTM5Textfield = new JTextfieldLimit(30);
        ConfigModulesBoldCheckbox = new javax.swing.JCheckBox();
        configTextbausteineRightPanel = new javax.swing.JPanel();
        ConfigTM10Textfield = new JTextfieldLimit(30);
        ConfigKM10Textfield = new javax.swing.JTextField();
        ConfigKM9Textfield = new javax.swing.JTextField();
        ConfigKM8Textfield = new javax.swing.JTextField();
        ConfigKM7Textfield = new javax.swing.JTextField();
        ConfigKM6Textfield = new javax.swing.JTextField();
        ConfigTM6Textfield = new JTextfieldLimit(30);
        ConfigTM7Textfield = new JTextfieldLimit(30);
        ConfigTM8Textfield = new JTextfieldLimit(30);
        ConfigTM9Textfield = new JTextfieldLimit(30);
        ConfigPrintModulesButton = new javax.swing.JButton();
        ConfigStenoPanel = new javax.swing.JPanel();
        ConfigStenoScrollPane = new javax.swing.JScrollPane();
        ConfigStenoTable = new javax.swing.JTable();
        ConfigStenoLabel = new javax.swing.JLabel();
        ConfigStenoActivateCheckbox = new javax.swing.JCheckBox();
        ConfigStenoPrintButton = new javax.swing.JButton();
        ConfigStenoImportButton = new javax.swing.JButton();
        ConfigStenoExportButton = new javax.swing.JButton();
        ConfigMiscPanel = new javax.swing.JPanel();
        ConfigLanguageLabel = new javax.swing.JLabel();
        ConfigLanguageCombobox = new javax.swing.JComboBox();
        ConfigMiscLabel = new javax.swing.JLabel();
        ConfigTooltipCheckbox = new javax.swing.JCheckBox();
        ConfigShowStartCheckbox = new javax.swing.JCheckBox();
        ConfigOPFolderLabel = new javax.swing.JLabel();
        ConfigOPCheckbox = new javax.swing.JCheckBox();
        ConfigOPTextfield = new javax.swing.JTextField();
        ConfigOPButton = new javax.swing.JButton();
        ConfigOPScrollPane = new javax.swing.JScrollPane();
        ConfigOPTextArea = new javax.swing.JTextArea();
        ConfigOPUpdatechannelLabel = new javax.swing.JLabel();
        ConfigOPUpdatechannelComboBox = new javax.swing.JComboBox();
        ConfigAutomaticUpdateSearchCheckbox = new javax.swing.JCheckBox();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/ewerkzeug/easytranscript/Core/Bundles/Bundle"); // NOI18N
        setTitle(bundle.getString("Easytranscript.MainconfigMenuitem.text")); // NOI18N
        setMinimumSize(new java.awt.Dimension(829, 500));

        ConfigSaveButton.setText(bundle.getString("Easytranscript.ConfigSaveButton.text")); // NOI18N
        ConfigSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigSaveButtonActionPerformed(evt);
            }
        });
        ConfigButtonPanel.add(ConfigSaveButton);

        ConfigResetButton.setText(bundle.getString("Easytranscript.ConfigResetButton.text")); // NOI18N
        ConfigResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigResetButtonActionPerformed(evt);
            }
        });
        ConfigButtonPanel.add(ConfigResetButton);

        ConfigCancelButton.setText(bundle.getString("Easytranscript.ConfigCancelButton.text")); // NOI18N
        ConfigCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigCancelButtonActionPerformed(evt);
            }
        });
        ConfigButtonPanel.add(ConfigCancelButton);

        ConfigHelpButton.setText(bundle.getString("Easytranscript.MainhelpMenuitem.text")); // NOI18N
        ConfigHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigHelpButtonActionPerformed(evt);
            }
        });
        ConfigButtonPanel.add(ConfigHelpButton);

        ConfigTimestampsLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ConfigTimestampsLabel.setText(bundle.getString("Easytranscript.ConfigTimestampsLabel.text")); // NOI18N

        ConfigTimestampsActiveCheckbox.setSelected(true);
        ConfigTimestampsActiveCheckbox.setText(bundle.getString("Easytranscript.ConfigTimestampsActiveCheckbox.text")); // NOI18N

        ConfigTimestampsBeginningCheckbox.setText(bundle.getString("Easytranscript.ConfigTimestampsBeginningCheckbox.text")); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, ConfigTimestampsActiveCheckbox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), ConfigTimestampsBeginningCheckbox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        ConfigPassageCheckbox.setSelected(true);
        ConfigPassageCheckbox.setText(bundle.getString("Easytranscript.ConfigPassageCheckbox.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, ConfigTimestampsActiveCheckbox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), ConfigPassageCheckbox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        ConfigCOSLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ConfigCOSLabel.setText(bundle.getString("Easytranscript.ConfigCOSLabel.text")); // NOI18N

        ConfigCOSCheckbox.setText(bundle.getString("Easytranscript.ConfigCOSCheckbox.text")); // NOI18N

        ConfigCOSInterviewerTextfield.setText(bundle.getString("Easytranscript.ConfigCOSInterviewerTextfield.text")); // NOI18N

        ConfigCOSPersonTextfield.setText(bundle.getString("Easytranscript.ConfigCOSPersonTextfield.text")); // NOI18N

        ConfigBackupLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ConfigBackupLabel.setText(bundle.getString("Easytranscript.ConfigBackupLabel.text")); // NOI18N

        ConfigCreateBackupCheckbox.setSelected(true);
        ConfigCreateBackupCheckbox.setText(bundle.getString("Easytranscript.ConfigCreateBackupCheckbox.text")); // NOI18N

        ConfigBackupMinutesSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 1, 60, 1));
        ConfigBackupMinutesSpinner.setName(""); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, ConfigCreateBackupCheckbox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), ConfigBackupMinutesSpinner, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        ConfigBackupMinutesLabel.setText(bundle.getString("Easytranscript.ConfigBackupMinutesLabel.text")); // NOI18N

        ConfigCOSBoldCheckbox.setText(bundle.getString("Easytranscript.ConfigCOSBoldCheckbox.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, ConfigCOSCheckbox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), ConfigCOSBoldCheckbox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        ConfigTimestampsEndingCheckbox.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ConfigTimestampsEndingCheckbox.setText(bundle.getString("TimeStampAtTheEndAsWell")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, ConfigTimestampsBeginningCheckbox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), ConfigTimestampsEndingCheckbox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        ConfigSuggestionsLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ConfigSuggestionsLabel.setText(bundle.getString("autocompletion")); // NOI18N

        ConfigSuggestionsCheckbox.setSelected(true);
        ConfigSuggestionsCheckbox.setText(bundle.getString("autocompletion_text")); // NOI18N

        ConfigPerformanceModeCheckbox.setText(bundle.getString("PerformanceModeCheckbox")); // NOI18N

        ConfigPerformanceLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/status_Warning.png"))); // NOI18N
        ConfigPerformanceLabel.setText(bundle.getString("PerformanceModeNote")); // NOI18N

        ConfigPerformanceTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ConfigPerformanceTitleLabel.setText(bundle.getString("PerformanceMode")); // NOI18N

        javax.swing.GroupLayout ConfigEditorPanelLayout = new javax.swing.GroupLayout(ConfigEditorPanel);
        ConfigEditorPanel.setLayout(ConfigEditorPanelLayout);
        ConfigEditorPanelLayout.setHorizontalGroup(
            ConfigEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigEditorPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(ConfigEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ConfigPerformanceTitleLabel)
                    .addComponent(ConfigTimestampsLabel)
                    .addGroup(ConfigEditorPanelLayout.createSequentialGroup()
                        .addGroup(ConfigEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ConfigBackupLabel)
                            .addGroup(ConfigEditorPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(ConfigEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ConfigTimestampsActiveCheckbox)
                                    .addComponent(ConfigTimestampsBeginningCheckbox)
                                    .addGroup(ConfigEditorPanelLayout.createSequentialGroup()
                                        .addGroup(ConfigEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(ConfigCreateBackupCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(ConfigPassageCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ConfigBackupMinutesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ConfigBackupMinutesLabel))))
                            .addGroup(ConfigEditorPanelLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(ConfigTimestampsEndingCheckbox)))
                        .addGap(84, 84, 84)
                        .addGroup(ConfigEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ConfigCOSLabel)
                            .addComponent(ConfigSuggestionsLabel)
                            .addGroup(ConfigEditorPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(ConfigEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ConfigSuggestionsCheckbox)
                                    .addGroup(ConfigEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(ConfigEditorPanelLayout.createSequentialGroup()
                                            .addComponent(ConfigCOSCheckbox)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(ConfigCOSBoldCheckbox))
                                        .addComponent(ConfigCOSInterviewerTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(ConfigCOSPersonTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(ConfigEditorPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(ConfigEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ConfigPerformanceModeCheckbox)
                            .addComponent(ConfigPerformanceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ConfigEditorPanelLayout.setVerticalGroup(
            ConfigEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigEditorPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(ConfigEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ConfigEditorPanelLayout.createSequentialGroup()
                        .addComponent(ConfigTimestampsLabel)
                        .addGap(18, 18, 18)
                        .addComponent(ConfigTimestampsActiveCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ConfigTimestampsBeginningCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ConfigTimestampsEndingCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ConfigPassageCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(ConfigEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ConfigBackupLabel)
                            .addComponent(ConfigSuggestionsLabel)))
                    .addGroup(ConfigEditorPanelLayout.createSequentialGroup()
                        .addComponent(ConfigCOSLabel)
                        .addGap(18, 18, 18)
                        .addGroup(ConfigEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ConfigCOSCheckbox)
                            .addComponent(ConfigCOSBoldCheckbox))
                        .addGap(18, 18, 18)
                        .addComponent(ConfigCOSInterviewerTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ConfigCOSPersonTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(ConfigEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ConfigEditorPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(ConfigEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ConfigCreateBackupCheckbox)
                            .addComponent(ConfigBackupMinutesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ConfigBackupMinutesLabel)))
                    .addGroup(ConfigEditorPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(ConfigSuggestionsCheckbox)))
                .addGap(18, 18, 18)
                .addComponent(ConfigPerformanceTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ConfigPerformanceModeCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ConfigPerformanceLabel)
                .addContainerGap(76, Short.MAX_VALUE))
        );

        ConfigKategorienTabbedPane.addTab(bundle.getString("Editor"), ConfigEditorPanel); // NOI18N

        ConfigKeymappingLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ConfigKeymappingLabel.setText(bundle.getString("Easytranscript.ConfigKeymappingLabel.text")); // NOI18N

        ConfigWindBackTextfield.setEditable(false);
        ConfigWindBackTextfield.setText(bundle.getString("Easytranscript.ConfigWindBackTextfield.text")); // NOI18N

        ConfigPlayTextfield.setEditable(false);
        ConfigPlayTextfield.setText(bundle.getString("Easytranscript.ConfigPlayTextfield.text")); // NOI18N

        ConfigFastForwardTextfield.setEditable(false);
        ConfigFastForwardTextfield.setText(bundle.getString("Easytranscript.ConfigFastForwardTextfield.text")); // NOI18N

        ConfigFastForwardCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12" }));
        ConfigFastForwardCombobox.setSelectedIndex(4);
        ConfigFastForwardCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigFastForwardComboboxActionPerformed(evt);
            }
        });
        ConfigFastForwardCombobox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ConfigFastForwardComboboxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ConfigFastForwardComboboxFocusLost(evt);
            }
        });

        ConfigWindBackCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12" }));
        ConfigWindBackCombobox.setSelectedIndex(2);
        ConfigWindBackCombobox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ConfigWindBackComboboxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ConfigWindBackComboboxFocusLost(evt);
            }
        });
        ConfigWindBackCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigWindBackComboboxActionPerformed(evt);
            }
        });

        ConfigPlayCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12" }));
        ConfigPlayCombobox.setSelectedIndex(3);
        ConfigPlayCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigPlayComboboxActionPerformed(evt);
            }
        });
        ConfigPlayCombobox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ConfigPlayComboboxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ConfigPlayComboboxFocusLost(evt);
            }
        });

        ConfigPlayerSystemWideCheckbox.setText(bundle.getString("PlayerSystemWideKeys")); // NOI18N
        ConfigPlayerSystemWideCheckbox.setEnabled(false);
        ConfigPlayerSystemWideCheckbox.setVisible(false);

        ConfigUseFXPLayerCheckbox.setText(bundle.getString("javaFXPlayerCheckbox")); // NOI18N

        ConfigUseFXPlayerTextArea.setEditable(false);
        ConfigUseFXPlayerTextArea.setBackground(new java.awt.Color(240, 240, 240));
        ConfigUseFXPlayerTextArea.setColumns(20);
        ConfigUseFXPlayerTextArea.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        ConfigUseFXPlayerTextArea.setLineWrap(true);
        ConfigUseFXPlayerTextArea.setRows(5);
        ConfigUseFXPlayerTextArea.setText(bundle.getString("javaFXPlayerWarning")); // NOI18N
        ConfigUseFXPlayerTextArea.setWrapStyleWord(true);
        ConfigUseFXPlayerTextArea.setBorder(null);
        ConfigUseFXPlayerScrollpane.setViewportView(ConfigUseFXPlayerTextArea);

        javax.swing.GroupLayout ConfigPlayerPanelLayout = new javax.swing.GroupLayout(ConfigPlayerPanel);
        ConfigPlayerPanel.setLayout(ConfigPlayerPanelLayout);
        ConfigPlayerPanelLayout.setHorizontalGroup(
            ConfigPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigPlayerPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(ConfigPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ConfigPlayerPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(ConfigPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ConfigPlayerPanelLayout.createSequentialGroup()
                                .addGroup(ConfigPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ConfigFastForwardTextfield)
                                    .addComponent(ConfigPlayTextfield)
                                    .addComponent(ConfigWindBackTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ConfigPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ConfigWindBackCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ConfigPlayCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ConfigFastForwardCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(ConfigPlayerSystemWideCheckbox))
                        .addGroup(ConfigPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ConfigPlayerPanelLayout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(ConfigUseFXPlayerScrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ConfigPlayerPanelLayout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(ConfigUseFXPLayerCheckbox))))
                    .addComponent(ConfigKeymappingLabel))
                .addContainerGap(93, Short.MAX_VALUE))
        );
        ConfigPlayerPanelLayout.setVerticalGroup(
            ConfigPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigPlayerPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(ConfigKeymappingLabel)
                .addGap(18, 18, 18)
                .addGroup(ConfigPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfigWindBackTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfigWindBackCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfigUseFXPLayerCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ConfigPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ConfigPlayerPanelLayout.createSequentialGroup()
                        .addGroup(ConfigPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ConfigPlayTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ConfigPlayCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ConfigPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ConfigFastForwardTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ConfigFastForwardCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(ConfigPlayerSystemWideCheckbox))
                    .addComponent(ConfigUseFXPlayerScrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(153, Short.MAX_VALUE))
        );

        ConfigKategorienTabbedPane.addTab(bundle.getString("Player"), ConfigPlayerPanel); // NOI18N

        ConfigTextModuleLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ConfigTextModuleLabel.setText(bundle.getString("Easytranscript.ConfigTextModuleLabel.text")); // NOI18N

        ConfigPassageLabel.setText(bundle.getString("Easytranscript.ConfigPassageLabel.text")); // NOI18N
        ConfigPassageLabel.setEnabled(false);

        ConfigTextbausteineLRPanel.setLayout(new java.awt.GridLayout());

        ConfigKM1Textfield.setEditable(false);
        ConfigKM1Textfield.setText(bundle.getString("Easytranscript.ConfigKM1Textfield.text")); // NOI18N

        ConfigTM1Textfield.setText(bundle.getString("Easytranscript.ConfigTM1Textfield.text")); // NOI18N

        ConfigKM2Textfield.setEditable(false);
        ConfigKM2Textfield.setText(bundle.getString("Easytranscript.ConfigKM2Textfield.text")); // NOI18N

        ConfigTM2Textfield.setText(bundle.getString("Easytranscript.ConfigTM2Textfield.text")); // NOI18N

        ConfigKM3Textfield.setEditable(false);
        ConfigKM3Textfield.setText(bundle.getString("Easytranscript.ConfigKM3Textfield.text")); // NOI18N

        ConfigTM3Textfield.setText(bundle.getString("Easytranscript.ConfigTM3Textfield.text")); // NOI18N

        ConfigKM4Textfield.setEditable(false);
        ConfigKM4Textfield.setText(bundle.getString("Easytranscript.ConfigKM4Textfield.text")); // NOI18N

        ConfigTM4Textfield.setText(bundle.getString("Easytranscript.ConfigTM4Textfield.text")); // NOI18N

        ConfigKM5Textfield.setEditable(false);
        ConfigKM5Textfield.setText(bundle.getString("Easytranscript.ConfigKM5Textfield.text")); // NOI18N

        ConfigTM5Textfield.setText(bundle.getString("Easytranscript.ConfigTM5Textfield.text")); // NOI18N

        ConfigModulesBoldCheckbox.setText(bundle.getString("Easytranscript.ConfigModulesBoldCheckbox.text")); // NOI18N

        javax.swing.GroupLayout ConfigTextbausteineLeftPanelLayout = new javax.swing.GroupLayout(ConfigTextbausteineLeftPanel);
        ConfigTextbausteineLeftPanel.setLayout(ConfigTextbausteineLeftPanelLayout);
        ConfigTextbausteineLeftPanelLayout.setHorizontalGroup(
            ConfigTextbausteineLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ConfigTextbausteineLeftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ConfigTextbausteineLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ConfigModulesBoldCheckbox)
                    .addGroup(ConfigTextbausteineLeftPanelLayout.createSequentialGroup()
                        .addGroup(ConfigTextbausteineLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ConfigKM5Textfield, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ConfigKM1Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ConfigTextbausteineLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ConfigTM1Textfield, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                            .addComponent(ConfigTM5Textfield)))
                    .addGroup(ConfigTextbausteineLeftPanelLayout.createSequentialGroup()
                        .addComponent(ConfigKM3Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ConfigTM3Textfield))
                    .addGroup(ConfigTextbausteineLeftPanelLayout.createSequentialGroup()
                        .addComponent(ConfigKM2Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ConfigTM2Textfield))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ConfigTextbausteineLeftPanelLayout.createSequentialGroup()
                        .addComponent(ConfigKM4Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ConfigTM4Textfield)))
                .addContainerGap())
        );
        ConfigTextbausteineLeftPanelLayout.setVerticalGroup(
            ConfigTextbausteineLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigTextbausteineLeftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ConfigTextbausteineLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfigTM1Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfigKM1Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ConfigTextbausteineLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfigTM2Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfigKM2Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ConfigTextbausteineLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfigTM3Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfigKM3Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ConfigTextbausteineLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfigTM4Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfigKM4Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ConfigTextbausteineLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfigKM5Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfigTM5Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(ConfigModulesBoldCheckbox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ConfigTextbausteineLRPanel.add(ConfigTextbausteineLeftPanel);

        ConfigTM10Textfield.setText(bundle.getString("Easytranscript.ConfigTM10Textfield.text")); // NOI18N

        ConfigKM10Textfield.setEditable(false);
        ConfigKM10Textfield.setText(bundle.getString("Easytranscript.ConfigKM10Textfield.text")); // NOI18N

        ConfigKM9Textfield.setEditable(false);
        ConfigKM9Textfield.setText(bundle.getString("Easytranscript.ConfigKM9Textfield.text")); // NOI18N

        ConfigKM8Textfield.setEditable(false);
        ConfigKM8Textfield.setText(bundle.getString("Easytranscript.ConfigKM8Textfield.text")); // NOI18N

        ConfigKM7Textfield.setEditable(false);
        ConfigKM7Textfield.setText(bundle.getString("Easytranscript.ConfigKM7Textfield.text")); // NOI18N

        ConfigKM6Textfield.setEditable(false);
        ConfigKM6Textfield.setText(bundle.getString("Easytranscript.ConfigKM6Textfield.text")); // NOI18N

        ConfigTM6Textfield.setText(bundle.getString("Easytranscript.ConfigTM6Textfield.text")); // NOI18N

        ConfigTM7Textfield.setText(bundle.getString("Easytranscript.ConfigTM7Textfield.text")); // NOI18N

        ConfigTM8Textfield.setText(bundle.getString("Easytranscript.ConfigTM8Textfield.text")); // NOI18N

        ConfigTM9Textfield.setText(bundle.getString("Easytranscript.ConfigTM9Textfield.text")); // NOI18N

        ConfigPrintModulesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/document-print-5.png"))); // NOI18N
        ConfigPrintModulesButton.setToolTipText(bundle.getString("Easytranscript.ConfigPrintModulesButton.toolTipText")); // NOI18N
        ConfigPrintModulesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigPrintModulesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout configTextbausteineRightPanelLayout = new javax.swing.GroupLayout(configTextbausteineRightPanel);
        configTextbausteineRightPanel.setLayout(configTextbausteineRightPanelLayout);
        configTextbausteineRightPanelLayout.setHorizontalGroup(
            configTextbausteineRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configTextbausteineRightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configTextbausteineRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configTextbausteineRightPanelLayout.createSequentialGroup()
                        .addGroup(configTextbausteineRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ConfigKM9Textfield)
                            .addComponent(ConfigKM8Textfield)
                            .addComponent(ConfigKM7Textfield)
                            .addComponent(ConfigKM10Textfield)
                            .addComponent(ConfigKM6Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(configTextbausteineRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ConfigTM6Textfield, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ConfigTM7Textfield, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ConfigTM8Textfield, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ConfigTM9Textfield, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ConfigTM10Textfield, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configTextbausteineRightPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 267, Short.MAX_VALUE)
                        .addComponent(ConfigPrintModulesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        configTextbausteineRightPanelLayout.setVerticalGroup(
            configTextbausteineRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configTextbausteineRightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configTextbausteineRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfigKM6Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfigTM6Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(configTextbausteineRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfigKM7Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfigTM7Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(configTextbausteineRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ConfigTM8Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfigKM8Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(configTextbausteineRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfigKM9Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfigTM9Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configTextbausteineRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfigKM10Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfigTM10Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ConfigPrintModulesButton)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        ConfigTextbausteineLRPanel.add(configTextbausteineRightPanel);

        javax.swing.GroupLayout ConfigTextbausteinePanelLayout = new javax.swing.GroupLayout(ConfigTextbausteinePanel);
        ConfigTextbausteinePanel.setLayout(ConfigTextbausteinePanelLayout);
        ConfigTextbausteinePanelLayout.setHorizontalGroup(
            ConfigTextbausteinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigTextbausteinePanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(ConfigTextbausteinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ConfigTextModuleLabel)
                    .addGroup(ConfigTextbausteinePanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(ConfigPassageLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(ConfigTextbausteineLRPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
        );
        ConfigTextbausteinePanelLayout.setVerticalGroup(
            ConfigTextbausteinePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigTextbausteinePanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(ConfigTextModuleLabel)
                .addGap(18, 18, 18)
                .addComponent(ConfigPassageLabel)
                .addGap(18, 18, 18)
                .addComponent(ConfigTextbausteineLRPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(94, Short.MAX_VALUE))
        );

        ConfigKategorienTabbedPane.addTab("Textbausteine", ConfigTextbausteinePanel);
        ConfigKategorienTabbedPane.setTitleAt(2, bundle.getString("Easytranscript.ConfigTextModuleLabel.text"));

        ConfigStenoTable.setAutoCreateRowSorter(true);
        ConfigStenoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Kürzel", "Voller Text"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        ConfigStenoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                messages.getString("abbreviation"), messages.getString("fullWord")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        ConfigStenoTable.getTableHeader().setReorderingAllowed(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, ConfigStenoActivateCheckbox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), ConfigStenoTable, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        ConfigStenoScrollPane.setViewportView(ConfigStenoTable);
        ConfigStenoTable.getModel().addTableModelListener(new TableModelListener() {
            @Override public void tableChanged(TableModelEvent e) {

                if (TableModelEvent.UPDATE == e.getType()) {

                    if (e.getLastRow()==(ConfigStenoTable.getModel().getRowCount()-1)){
                        if (ConfigStenoTable.getModel().getValueAt(e.getLastRow(), 0)!=null){
                            if (!ConfigStenoTable.getModel().getValueAt(e.getLastRow(), 0).equals("")){
                                if (ConfigStenoTable.getModel().getValueAt(e.getLastRow(), 1)!=null){
                                    if (!ConfigStenoTable.getModel().getValueAt(e.getLastRow(), 1).equals("")){
                                        ((DefaultTableModel) ConfigStenoTable.getModel()).setRowCount(ConfigStenoTable.getModel().getRowCount()+1);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        });

        TableCellEditor fce = new TrimmedCellEditor();
        ConfigStenoTable.getColumnModel().getColumn(0).setCellEditor(fce);

        ConfigStenoLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ConfigStenoLabel.setText(bundle.getString("Easytranscript.ConfigStenoLabel.text")); // NOI18N

        ConfigStenoActivateCheckbox.setText(bundle.getString("Easytranscript.ConfigStenoActivateCheckbox.text")); // NOI18N

        ConfigStenoPrintButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/document-print-5.png"))); // NOI18N
        ConfigStenoPrintButton.setText(bundle.getString("Easytranscript.ConfigStenoPrintButton.text")); // NOI18N
        ConfigStenoPrintButton.setToolTipText(bundle.getString("Easytranscript.ConfigStenoPrintButton.toolTipText")); // NOI18N
        ConfigStenoPrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigStenoPrintButtonActionPerformed(evt);
            }
        });

        ConfigStenoImportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/document-import-2_small.png"))); // NOI18N
        ConfigStenoImportButton.setToolTipText("Import");
        ConfigStenoImportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigStenoImportButtonActionPerformed(evt);
            }
        });

        ConfigStenoExportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/document-export-4.png"))); // NOI18N
        ConfigStenoExportButton.setToolTipText("Export");
        ConfigStenoExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigStenoExportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ConfigStenoPanelLayout = new javax.swing.GroupLayout(ConfigStenoPanel);
        ConfigStenoPanel.setLayout(ConfigStenoPanelLayout);
        ConfigStenoPanelLayout.setHorizontalGroup(
            ConfigStenoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigStenoPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(ConfigStenoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ConfigStenoPanelLayout.createSequentialGroup()
                        .addComponent(ConfigStenoLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(ConfigStenoPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(ConfigStenoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ConfigStenoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
                            .addGroup(ConfigStenoPanelLayout.createSequentialGroup()
                                .addComponent(ConfigStenoActivateCheckbox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ConfigStenoExportButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ConfigStenoImportButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ConfigStenoPrintButton)))))
                .addContainerGap())
        );
        ConfigStenoPanelLayout.setVerticalGroup(
            ConfigStenoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigStenoPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(ConfigStenoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ConfigStenoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ConfigStenoPanelLayout.createSequentialGroup()
                        .addGroup(ConfigStenoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ConfigStenoPrintButton)
                            .addComponent(ConfigStenoActivateCheckbox)
                            .addComponent(ConfigStenoImportButton))
                        .addGap(12, 12, 12)
                        .addComponent(ConfigStenoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE))
                    .addComponent(ConfigStenoExportButton))
                .addContainerGap())
        );

        ConfigKategorienTabbedPane.addTab("Stenographie", ConfigStenoPanel);
        ConfigKategorienTabbedPane.setTitleAt(3, bundle.getString("Easytranscript.ConfigStenoLabel.text"));

        ConfigLanguageLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ConfigLanguageLabel.setText(bundle.getString("Easytranscript.ConfigLanguageLabel.text")); // NOI18N

        ConfigLanguageCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Deutsch", "English", "Français", "日本人" }));

        ConfigMiscLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ConfigMiscLabel.setText(bundle.getString("Easytranscript.ConfigMiscLabel.text")); // NOI18N

        ConfigTooltipCheckbox.setSelected(true);
        ConfigTooltipCheckbox.setText(bundle.getString("Easytranscript.ConfigTooltipCheckbox.text")); // NOI18N
        ConfigTooltipCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigTooltipCheckboxActionPerformed(evt);
            }
        });

        ConfigShowStartCheckbox.setText(bundle.getString("Easytranscript.ConfigShowStartCheckbox.text")); // NOI18N

        ConfigOPFolderLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ConfigOPFolderLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/Core/Images/status_Warning.png"))); // NOI18N
        ConfigOPFolderLabel.setText(bundle.getString("Easytranscript.ConfigOPFolderLabel.text")); // NOI18N

        ConfigOPCheckbox.setText(bundle.getString("Easytranscript.ConfigOPCheckbox.text")); // NOI18N

        ConfigOPTextfield.setText(bundle.getString("Easytranscript.ConfigOPTextfield.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, ConfigOPCheckbox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), ConfigOPTextfield, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        ConfigOPButton.setText(bundle.getString("Easytranscript.ConfigOPButton.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, ConfigOPCheckbox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), ConfigOPButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        ConfigOPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigOPButtonActionPerformed(evt);
            }
        });

        ConfigOPScrollPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        ConfigOPTextArea.setEditable(false);
        ConfigOPTextArea.setBackground(new java.awt.Color(240, 240, 240));
        ConfigOPTextArea.setColumns(20);
        ConfigOPTextArea.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        ConfigOPTextArea.setLineWrap(true);
        ConfigOPTextArea.setText(bundle.getString("Easytranscript.ConfigOPTextArea.text")); // NOI18N
        ConfigOPTextArea.setBorder(null);
        ConfigOPTextArea.setOpaque(false);
        ConfigOPScrollPane.setViewportView(ConfigOPTextArea);

        ConfigOPUpdatechannelLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        ConfigOPUpdatechannelLabel.setText("Update-Channel");

        ConfigOPUpdatechannelComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "final", "Beta", "Alpha", "PreAlpha" }));

        ConfigAutomaticUpdateSearchCheckbox.setSelected(true);
        ConfigAutomaticUpdateSearchCheckbox.setText(bundle.getString("Easytranscript.ConfigAutomaticUpdateSearchCheckbox.text")); // NOI18N

        javax.swing.GroupLayout ConfigMiscPanelLayout = new javax.swing.GroupLayout(ConfigMiscPanel);
        ConfigMiscPanel.setLayout(ConfigMiscPanelLayout);
        ConfigMiscPanelLayout.setHorizontalGroup(
            ConfigMiscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigMiscPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(ConfigMiscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(ConfigMiscPanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(ConfigMiscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ConfigOPScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ConfigOPTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ConfigMiscPanelLayout.createSequentialGroup()
                        .addGroup(ConfigMiscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ConfigMiscLabel)
                            .addGroup(ConfigMiscPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(ConfigMiscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ConfigOPFolderLabel)
                                    .addComponent(ConfigOPCheckbox)
                                    .addComponent(ConfigTooltipCheckbox)
                                    .addComponent(ConfigAutomaticUpdateSearchCheckbox)
                                    .addComponent(ConfigShowStartCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(ConfigMiscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ConfigLanguageLabel)
                            .addComponent(ConfigOPUpdatechannelLabel)
                            .addGroup(ConfigMiscPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(ConfigMiscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ConfigOPUpdatechannelComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ConfigLanguageCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ConfigOPButton)
                .addContainerGap(59, Short.MAX_VALUE))
        );
        ConfigMiscPanelLayout.setVerticalGroup(
            ConfigMiscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ConfigMiscPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(ConfigMiscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfigMiscLabel)
                    .addComponent(ConfigLanguageLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ConfigMiscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfigTooltipCheckbox)
                    .addComponent(ConfigLanguageCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(ConfigMiscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ConfigMiscPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(ConfigOPUpdatechannelLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ConfigOPUpdatechannelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ConfigMiscPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ConfigShowStartCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ConfigAutomaticUpdateSearchCheckbox)))
                .addGap(18, 18, 18)
                .addComponent(ConfigOPFolderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ConfigOPCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ConfigMiscPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfigOPTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfigOPButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ConfigOPScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(104, Short.MAX_VALUE))
        );

        ConfigKategorienTabbedPane.addTab("Sonstiges", ConfigMiscPanel);
        ConfigKategorienTabbedPane.setTitleAt(4, bundle.getString("Easytranscript.ConfigMiscLabel.text"));

        javax.swing.GroupLayout ConfigMainPanelLayout = new javax.swing.GroupLayout(ConfigMainPanel);
        ConfigMainPanel.setLayout(ConfigMainPanelLayout);
        ConfigMainPanelLayout.setHorizontalGroup(
            ConfigMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ConfigKategorienTabbedPane)
                .addContainerGap())
            .addComponent(ConfigButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ConfigMainPanelLayout.setVerticalGroup(
            ConfigMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ConfigKategorienTabbedPane)
                .addGap(18, 18, 18)
                .addComponent(ConfigButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ConfigMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ConfigMainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ConfigSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigSaveButtonActionPerformed
        /*if (ConfigPlayerSystemWideCheckbox.isSelected()) {
            if (getOS().contains("Lin")) {
                int n = JOptionPane.showConfirmDialog(null, messages.getString("JXGrabKeyInstable"), "", JOptionPane.YES_NO_OPTION);
                if (n == JOptionPane.NO_OPTION) {

                    return;
                }
            }
        }*/
         try {
            ConfigStenoTable.getCellEditor().stopCellEditing();
        } catch (Exception e) {

        }
        

        boolean performance = prop.getBoolProperty("usePerformanceMode");

        String lang_old = prop.getProperty("lang");

        if (ConfigLanguageCombobox.getSelectedIndex() == 0) {
            prop.setProperty("lang", "de");
        }
        if (ConfigLanguageCombobox.getSelectedIndex() == 1) {
            prop.setProperty("lang", "en");
        }
        if (ConfigLanguageCombobox.getSelectedIndex() == 2) {
            if (!prop.getProperty("lang").equals("fr")) {
                JOptionPane.showMessageDialog(null, "La traduction française n'a pas été pleinement vérifiées, par conséquent, il peut y avoir des erreurs.\nSi vous voulez aider à la traduction, contactez le support.");
            }
            prop.setProperty("lang", "fr");
// "The French translation has not been fully checked, therefore, there can be mistakes.\n If you want to help with the translation, please contact the support.");
        }
        if (ConfigLanguageCombobox.getSelectedIndex() == 3) {
            prop.setProperty("lang", "ja");
        }

        if (ConfigOPCheckbox.isSelected()) {

            FileWriter fstream;
            try {
                new File("opFolder.cfg").delete();
                fstream = new FileWriter("opFolder.cfg", false);
                BufferedWriter out = new BufferedWriter(fstream);
                String s = ConfigOPTextfield.getText();
                if (!s.equals("PROGPATH")) {
                    if (!s.endsWith(System.getProperty("file.separator"))) {

                        s = s + System.getProperty("file.separator");
                    }
                }
                out.write(s);
                checkOp();

                out.close();

                JOptionPane.showMessageDialog(null, messages.getString("ConfigSaveOP"));

            } catch (IOException ex) {
                Logger.getLogger(ConfigFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            new File("opFolder.cfg").delete();
        }

    //    prop.setBoolProperty("ConfigPlayerSystemWideCheckbox", ConfigPlayerSystemWideCheckbox.isSelected());
       /* if (!ConfigPlayerSystemWideCheckbox.isSelected()) {
            if (SystemWideKeyWasActive > 0) {

                if (getOS().equals("Win")) {
                    /*JIntellitype.getInstance().unregisterHotKey(0);
                    JIntellitype.getInstance().unregisterHotKey(1);
                    JIntellitype.getInstance().unregisterHotKey(2);

                }
                if (getOS().equals("Lin")) {
                    JXGrabKey.getInstance().unregisterHotKey(0);
                    JXGrabKey.getInstance().unregisterHotKey(1);
                    JXGrabKey.getInstance().unregisterHotKey(2);

                }
                if (getOS().equals("Mac")) {

                    //   OsSupport.getInstance().registerHotKey(0, new HotKeyDesc(0, 0, KeyEvent.VK_F3));
                    //   OsSupport.getInstance().registerHotKey(1, new HotKeyDesc(0, 0, KeyEvent.VK_F4));
                    //  OsSupport.getInstance().registerHotKey(2, new HotKeyDesc(0, 0, KeyEvent.VK_F5));
                }
            }

        } else {
            if (getOS().contains("Mac")) {
                JOptionPane.showMessageDialog(null, "system wide hotkeys are currently not supported under Mac, sorry.");
            } else {

                if (SystemWideKeyWasActive == 0) {
                  //  easytranscript.loadSystemWideHotkeysLibraries();
                }
            }

        }*/

        prop.setBoolProperty("usePerformanceMode", ConfigPerformanceModeCheckbox.isSelected());
        boolean useFXPlayerOld = prop.getBoolProperty("useFXPlayer");
        prop.setBoolProperty("useFXPlayer", ConfigUseFXPLayerCheckbox.isSelected());
        prop.setBoolProperty("suggestions", ConfigSuggestionsCheckbox.isSelected());
        prop.setBoolProperty("ConfigStenoActivate", ConfigStenoActivateCheckbox.isSelected());
        prop.setBoolProperty("showStart", ConfigShowStartCheckbox.isSelected());
        prop.setStringProperty("Tbs1", ConfigTM1Textfield.getText());
        prop.setStringProperty("Tbs2", ConfigTM2Textfield.getText());
        prop.setStringProperty("Tbs3", ConfigTM3Textfield.getText());
        prop.setStringProperty("Tbs4", ConfigTM4Textfield.getText());
        prop.setStringProperty("Tbs5", ConfigTM5Textfield.getText());
        prop.setStringProperty("Tbs6", ConfigTM6Textfield.getText());
        prop.setStringProperty("Tbs7", ConfigTM7Textfield.getText());
        prop.setStringProperty("Tbs8", ConfigTM8Textfield.getText());
        prop.setStringProperty("Tbs9", ConfigTM9Textfield.getText());
        prop.setStringProperty("Tbs10", ConfigTM10Textfield.getText());
        prop.setStringProperty("SprecherwechselP1", ConfigCOSInterviewerTextfield.getText());
        prop.setStringProperty("SprecherwechselP2", ConfigCOSPersonTextfield.getText());
        prop.setBoolProperty("ZMleerzeile", ConfigPassageCheckbox.isSelected());
        prop.setBoolProperty("Sprecherwechsel", ConfigCOSCheckbox.isSelected());
        prop.setBoolProperty("zeitmarkeBeginning", ConfigTimestampsBeginningCheckbox.isSelected());
        prop.setBoolProperty("zeitmarkeEnding", ConfigTimestampsEndingCheckbox.isSelected());
        prop.setBoolProperty("ZeitmarkenActive", ConfigTimestampsActiveCheckbox.isSelected());
        prop.setBoolProperty("backupEnabled", ConfigCreateBackupCheckbox.isSelected());
        prop.setStringProperty("updatechannel", ConfigOPUpdatechannelComboBox.getSelectedItem().toString());
        prop.setIntProperty("backupTimer", ((Integer) ConfigBackupMinutesSpinner.getValue()) * 1000 * 60);
        if (backupTimer != null) {
            backupTimer.setDelay(prop.getIntProperty("backupTimer"));
        }
        prop.setBoolProperty("updateAuto", ConfigAutomaticUpdateSearchCheckbox.isSelected());
        prop.setBoolProperty("TextbausteineFett", ConfigModulesBoldCheckbox.isSelected());
        prop.setBoolProperty("COSFett", ConfigCOSBoldCheckbox.isSelected());
        prop.setBoolProperty("showToolTip", ConfigTooltipCheckbox.isSelected());

        prop.setStringProperty("playerBack", String.valueOf(ConfigWindBackCombobox.getSelectedItem()));
        prop.setStringProperty("playerPlay", String.valueOf(ConfigPlayCombobox.getSelectedItem()));
        prop.setStringProperty("playerForw", String.valueOf(ConfigFastForwardCombobox.getSelectedItem()));

        try {
            prop.save();
        } catch (IOException e) {
            V.logger.log(Level.SEVERE, new ErrorReport().show(errors.getString("SavingConfig2")), e);

        }
        setVisible(false);
        steno.setTable();
        steno.save();
        prop.applyProperties();
        if (getOS().equals("Mac")) {
            useFXPlayerOld = ConfigUseFXPLayerCheckbox.isSelected();
        }
        if (!lang_old.contains(prop.getProperty("lang")) || useFXPlayerOld != ConfigUseFXPLayerCheckbox.isSelected() || performance != ConfigPerformanceModeCheckbox.isSelected()) {
            JOptionPane.showMessageDialog(null, messages.getString("SpracheAnwenden"));
        }

    }//GEN-LAST:event_ConfigSaveButtonActionPerformed

    private void ConfigResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigResetButtonActionPerformed
        try {
            prop.createDefaults();
        } catch (IOException e) {
            V.logger.log(Level.SEVERE, new ErrorReport().show(errors.getString("SavingConfig2")), e);

        }
        prop.load(true);
    }//GEN-LAST:event_ConfigResetButtonActionPerformed

    private void ConfigCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigCancelButtonActionPerformed
        steno.load();
        steno.setTable();

        prop.applyProperties();
        setVisible(false);
    }//GEN-LAST:event_ConfigCancelButtonActionPerformed

    private void ConfigFastForwardComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigFastForwardComboboxActionPerformed
        if (playerButtonsConfCbHasFocus[2]) {
            updateAvailKeys();
        }
    }//GEN-LAST:event_ConfigFastForwardComboboxActionPerformed

    private void ConfigFastForwardComboboxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ConfigFastForwardComboboxFocusGained
        playerButtonsConfCbHasFocus[2] = true;
    }//GEN-LAST:event_ConfigFastForwardComboboxFocusGained

    private void ConfigFastForwardComboboxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ConfigFastForwardComboboxFocusLost
        playerButtonsConfCbHasFocus[2] = false;
    }//GEN-LAST:event_ConfigFastForwardComboboxFocusLost

    private void ConfigWindBackComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigWindBackComboboxActionPerformed
        if (playerButtonsConfCbHasFocus[0] == true) {
            updateAvailKeys();
        }
    }//GEN-LAST:event_ConfigWindBackComboboxActionPerformed

    private void ConfigWindBackComboboxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ConfigWindBackComboboxFocusGained
        playerButtonsConfCbHasFocus[0] = true;
    }//GEN-LAST:event_ConfigWindBackComboboxFocusGained

    private void ConfigWindBackComboboxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ConfigWindBackComboboxFocusLost
        playerButtonsConfCbHasFocus[0] = false;
    }//GEN-LAST:event_ConfigWindBackComboboxFocusLost

    private void ConfigPlayComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigPlayComboboxActionPerformed
        if (playerButtonsConfCbHasFocus[1]) {
            updateAvailKeys();
        }
    }//GEN-LAST:event_ConfigPlayComboboxActionPerformed

    private void ConfigPlayComboboxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ConfigPlayComboboxFocusGained
        playerButtonsConfCbHasFocus[1] = true;
    }//GEN-LAST:event_ConfigPlayComboboxFocusGained

    private void ConfigPlayComboboxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ConfigPlayComboboxFocusLost
        playerButtonsConfCbHasFocus[1] = false;
    }//GEN-LAST:event_ConfigPlayComboboxFocusLost

    private void ConfigPrintModulesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigPrintModulesButtonActionPerformed
        JTextPane textPane = new JTextPane();

        textPane.setText(ConfigKM1Textfield.getText() + ": " + ConfigTM1Textfield.getText() + "\n"
                + ConfigKM2Textfield.getText() + ": " + ConfigTM2Textfield.getText() + "\n"
                + ConfigKM3Textfield.getText() + ": " + ConfigTM3Textfield.getText() + "\n"
                + ConfigKM4Textfield.getText() + ": " + ConfigTM4Textfield.getText() + "\n"
                + ConfigKM5Textfield.getText() + ": " + ConfigTM5Textfield.getText() + "\n"
                + ConfigKM6Textfield.getText() + ": " + ConfigTM6Textfield.getText() + "\n"
                + ConfigKM7Textfield.getText() + ": " + ConfigTM7Textfield.getText() + "\n"
                + ConfigKM8Textfield.getText() + ": " + ConfigTM8Textfield.getText() + "\n"
                + ConfigKM9Textfield.getText() + ": " + ConfigTM9Textfield.getText() + "\n"
                + ConfigKM10Textfield.getText() + ": " + ConfigTM10Textfield.getText() + "\n");

        new printDocument(textPane, "", "easytranscript - config").execute();

    }//GEN-LAST:event_ConfigPrintModulesButtonActionPerformed

    private void ConfigStenoPrintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigStenoPrintButtonActionPerformed

        new printDocument(ConfigStenoTable, "", "easytranscript - Steno").execute();
    }//GEN-LAST:event_ConfigStenoPrintButtonActionPerformed

    private void ConfigTooltipCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigTooltipCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ConfigTooltipCheckboxActionPerformed

    private void ConfigOPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigOPButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

            String s = chooser.getSelectedFile().getAbsolutePath();
            if (!s.endsWith(System.getProperty("file.separator"))) {
                s = s + System.getProperty("file.separator");
            }
            ConfigOPTextfield.setText(s);
        }

    }//GEN-LAST:event_ConfigOPButtonActionPerformed

    private void ConfigStenoExportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigStenoExportButtonActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new FileNameExtensionFilter("Steno Data (.data)", "data"));
        fileChooser.setAcceptAllFileFilterUsed(true);
        fileChooser.setCurrentDirectory(new File(opFolder + "Projects/"));
        int ruckgabe = fileChooser.showSaveDialog(null);

        if (ruckgabe == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if (!file.getAbsolutePath().endsWith(".data")) {
                file = new File(file.getAbsolutePath() + ".data");
            }

            steno.save(file.getAbsolutePath());

        }
    }//GEN-LAST:event_ConfigStenoExportButtonActionPerformed

    private void ConfigStenoImportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigStenoImportButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new FileNameExtensionFilter("Steno Data (.data)", "data"));
        fileChooser.setAcceptAllFileFilterUsed(true);
        fileChooser.setCurrentDirectory(new File(opFolder + "Projects/"));
        int ruckgabe = fileChooser.showOpenDialog(null);

        if (ruckgabe == JFileChooser.APPROVE_OPTION) {

            int action = JOptionPane.showOptionDialog(null, messages.getString("StenoImportMessage"), "Import", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{messages.getString("StenoImportReplace"), messages.getString("StenoImportAppend"), messages.getString("StenoImportCancel")}, messages.getString("StenoImportCancel"));

            if (action != 2) {
                Properties pT = new Properties();
                try {
                    pT.load(new FileInputStream(fileChooser.getSelectedFile().getAbsolutePath()));
                } catch (IOException ex) {
                    Logger.getLogger(ConfigFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, messages.getString("StenoImportError"), "", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (steno.check(pT) == false) {
                    JOptionPane.showMessageDialog(null, messages.getString("StenoImportError"), "", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (action == 0) {
                    steno.replace(pT);
                    steno.save();
                    steno.load();
                    //((DefaultTableModel) ConfigStenoTable.getModel()).fireTableDataChanged();
                }
                if (action == 1) {
                    steno.merge(pT);
                    steno.save();
                    steno.load();
                    // ((DefaultTableModel) ConfigStenoTable.getModel()).fireTableDataChanged();
                }

            }

        }
    }//GEN-LAST:event_ConfigStenoImportButtonActionPerformed

    private void ConfigHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigHelpButtonActionPerformed

        new Tools().browse("http://e-werkzeug.eu/software/easytranscript/versions/" + V.VERSION.getMajorVersion() + "." + V.VERSION.getMinorVersion() + "/help/" + currentLocale.getLanguage() + "/");
    }//GEN-LAST:event_ConfigHelpButtonActionPerformed

    /**
     * Updated die noch belegbaren Tasten für die Shortcuts der Playerbuttons.
     */
    public void updateAvailKeys() {
        String[] name = new String[3];
        name[0] = String.valueOf(ConfigWindBackCombobox.getSelectedItem());
        name[1] = String.valueOf(ConfigPlayCombobox.getSelectedItem());
        name[2] = String.valueOf(ConfigFastForwardCombobox.getSelectedItem());

        addKeyEntries(ConfigWindBackCombobox, name[1], name[2]);
        addKeyEntries(ConfigPlayCombobox, name[0], name[2]);
        addKeyEntries(ConfigFastForwardCombobox, name[0], name[1]);

    }

    /**
     * Fügt den ComboBoxen der Shortcuts Tasten hinzu.
     *
     * @param cb
     * @param index1
     * @param index2
     */
    private void addKeyEntries(JComboBox cb, String index1, String index2) {
        String selected = String.valueOf(cb.getSelectedItem());
        cb.removeAllItems();

        for (int i = 1; i < 13; i++) {
            boolean disable = false;

            if (("F" + String.valueOf(i)).equals(index1) || ("F" + String.valueOf(i)).equals(index2)) {
                disable = true;
            }

            if (disable == false) {
                cb.addItem("F" + i);
            }
        }
        cb.setSelectedItem(selected);
    }

    public JComboBox getConfigLanguageCombobox() {
        return ConfigLanguageCombobox;
    }

    public JCheckBox getConfigAutomaticUpdateSearchCheckbox() {
        return ConfigAutomaticUpdateSearchCheckbox;
    }

    public JSpinner getConfigBackupMinutesSpinner() {
        return ConfigBackupMinutesSpinner;
    }

    public JCheckBox getConfigCOSBoldCheckbox() {
        return ConfigCOSBoldCheckbox;
    }

    public JCheckBox getConfigCOSCheckbox() {
        return ConfigCOSCheckbox;
    }

    public JTextField getConfigCOSInterviewerTextfield() {
        return ConfigCOSInterviewerTextfield;
    }

    public JTextField getConfigCOSPersonTextfield() {
        return ConfigCOSPersonTextfield;
    }

    public JCheckBox getConfigCreateBackupCheckbox() {
        return ConfigCreateBackupCheckbox;
    }

    public JComboBox getConfigFastForwardCombobox() {
        return ConfigFastForwardCombobox;
    }

    public static JTextField getConfigFastForwardTextfield() {
        return ConfigFastForwardTextfield;
    }

    public JCheckBox getConfigModulesBoldCheckbox() {
        return ConfigModulesBoldCheckbox;
    }

    public JCheckBox getConfigOPCheckbox() {
        return ConfigOPCheckbox;
    }

    public JTextField getConfigOPTextfield() {
        return ConfigOPTextfield;
    }

    public JCheckBox getConfigPassageCheckbox() {
        return ConfigPassageCheckbox;
    }

    public JComboBox getConfigPlayCombobox() {
        return ConfigPlayCombobox;
    }

    public JCheckBox getConfigShowStartCheckbox() {
        return ConfigShowStartCheckbox;
    }

    public JCheckBox getConfigStenoActivateCheckbox() {
        return ConfigStenoActivateCheckbox;
    }

    public JTable getConfigStenoTable() {
        return ConfigStenoTable;
    }

    public JTextField getConfigTM10Textfield() {
        return ConfigTM10Textfield;
    }

    public JTextField getConfigTM1Textfield() {
        return ConfigTM1Textfield;
    }

    public JTextField getConfigTM2Textfield() {
        return ConfigTM2Textfield;
    }

    public JTextField getConfigTM3Textfield() {
        return ConfigTM3Textfield;
    }

    public JTextField getConfigTM4Textfield() {
        return ConfigTM4Textfield;
    }

    public JTextField getConfigTM5Textfield() {
        return ConfigTM5Textfield;
    }

    public JTextField getConfigTM6Textfield() {
        return ConfigTM6Textfield;
    }

    public JTextField getConfigTM7Textfield() {
        return ConfigTM7Textfield;
    }

    public JTextField getConfigTM8Textfield() {
        return ConfigTM8Textfield;
    }

    public JTextField getConfigTM9Textfield() {
        return ConfigTM9Textfield;
    }

    public JLabel getConfigTextModuleLabel() {
        return ConfigTextModuleLabel;
    }

    public JCheckBox getConfigTimestampsActiveCheckbox() {
        return ConfigTimestampsActiveCheckbox;
    }

    public JCheckBox getConfigTimestampsBeginningCheckbox() {
        return ConfigTimestampsBeginningCheckbox;
    }

    public JCheckBox getConfigTooltipCheckbox() {
        return ConfigTooltipCheckbox;
    }

    public JComboBox getConfigWindBackCombobox() {
        return ConfigWindBackCombobox;
    }

    public static JTextField getConfigWindBackTextfield() {
        return ConfigWindBackTextfield;
    }

    public JCheckBox getConfigTimestampsEndingCheckbox() {
        return ConfigTimestampsEndingCheckbox;
    }

    public JCheckBox getConfigPlayerSystemWideCheckbox() {
        return ConfigPlayerSystemWideCheckbox;
    }

    public JCheckBox getConfigSuggestionsCheckbox() {
        return ConfigSuggestionsCheckbox;
    }

    public JComboBox getConfigOPUpdatechannelComboBox() {
        return ConfigOPUpdatechannelComboBox;
    }

    public JCheckBox getConfigUseFXPLayerCheckbox() {
        return ConfigUseFXPLayerCheckbox;
    }

    public JCheckBox getConfigPerformanceModeCheckbox() {
        return ConfigPerformanceModeCheckbox;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ConfigAutomaticUpdateSearchCheckbox;
    private javax.swing.JLabel ConfigBackupLabel;
    private javax.swing.JLabel ConfigBackupMinutesLabel;
    private javax.swing.JSpinner ConfigBackupMinutesSpinner;
    private javax.swing.JPanel ConfigButtonPanel;
    private javax.swing.JCheckBox ConfigCOSBoldCheckbox;
    private javax.swing.JCheckBox ConfigCOSCheckbox;
    private javax.swing.JTextField ConfigCOSInterviewerTextfield;
    private javax.swing.JLabel ConfigCOSLabel;
    private javax.swing.JTextField ConfigCOSPersonTextfield;
    private javax.swing.JButton ConfigCancelButton;
    private javax.swing.JCheckBox ConfigCreateBackupCheckbox;
    private javax.swing.JPanel ConfigEditorPanel;
    private javax.swing.JComboBox ConfigFastForwardCombobox;
    public static javax.swing.JTextField ConfigFastForwardTextfield;
    private javax.swing.JButton ConfigHelpButton;
    private javax.swing.JTextField ConfigKM10Textfield;
    private javax.swing.JTextField ConfigKM1Textfield;
    private javax.swing.JTextField ConfigKM2Textfield;
    private javax.swing.JTextField ConfigKM3Textfield;
    private javax.swing.JTextField ConfigKM4Textfield;
    private javax.swing.JTextField ConfigKM5Textfield;
    private javax.swing.JTextField ConfigKM6Textfield;
    private javax.swing.JTextField ConfigKM7Textfield;
    private javax.swing.JTextField ConfigKM8Textfield;
    private javax.swing.JTextField ConfigKM9Textfield;
    private javax.swing.JTabbedPane ConfigKategorienTabbedPane;
    private javax.swing.JLabel ConfigKeymappingLabel;
    private javax.swing.JComboBox ConfigLanguageCombobox;
    private javax.swing.JLabel ConfigLanguageLabel;
    private javax.swing.JPanel ConfigMainPanel;
    private javax.swing.JLabel ConfigMiscLabel;
    private javax.swing.JPanel ConfigMiscPanel;
    private javax.swing.JCheckBox ConfigModulesBoldCheckbox;
    private javax.swing.JButton ConfigOPButton;
    private javax.swing.JCheckBox ConfigOPCheckbox;
    private javax.swing.JLabel ConfigOPFolderLabel;
    private javax.swing.JScrollPane ConfigOPScrollPane;
    private javax.swing.JTextArea ConfigOPTextArea;
    private javax.swing.JTextField ConfigOPTextfield;
    private javax.swing.JComboBox ConfigOPUpdatechannelComboBox;
    private javax.swing.JLabel ConfigOPUpdatechannelLabel;
    private javax.swing.JCheckBox ConfigPassageCheckbox;
    private javax.swing.JLabel ConfigPassageLabel;
    private javax.swing.JLabel ConfigPerformanceLabel;
    private javax.swing.JCheckBox ConfigPerformanceModeCheckbox;
    private javax.swing.JLabel ConfigPerformanceTitleLabel;
    private javax.swing.JComboBox ConfigPlayCombobox;
    public static javax.swing.JTextField ConfigPlayTextfield;
    private javax.swing.JPanel ConfigPlayerPanel;
    private javax.swing.JCheckBox ConfigPlayerSystemWideCheckbox;
    private javax.swing.JButton ConfigPrintModulesButton;
    private javax.swing.JButton ConfigResetButton;
    private javax.swing.JButton ConfigSaveButton;
    private javax.swing.JCheckBox ConfigShowStartCheckbox;
    private javax.swing.JCheckBox ConfigStenoActivateCheckbox;
    private javax.swing.JButton ConfigStenoExportButton;
    private javax.swing.JButton ConfigStenoImportButton;
    private javax.swing.JLabel ConfigStenoLabel;
    private javax.swing.JPanel ConfigStenoPanel;
    private javax.swing.JButton ConfigStenoPrintButton;
    private javax.swing.JScrollPane ConfigStenoScrollPane;
    private javax.swing.JTable ConfigStenoTable;
    private javax.swing.JCheckBox ConfigSuggestionsCheckbox;
    private javax.swing.JLabel ConfigSuggestionsLabel;
    private javax.swing.JTextField ConfigTM10Textfield;
    private javax.swing.JTextField ConfigTM1Textfield;
    private javax.swing.JTextField ConfigTM2Textfield;
    private javax.swing.JTextField ConfigTM3Textfield;
    private javax.swing.JTextField ConfigTM4Textfield;
    private javax.swing.JTextField ConfigTM5Textfield;
    private javax.swing.JTextField ConfigTM6Textfield;
    private javax.swing.JTextField ConfigTM7Textfield;
    private javax.swing.JTextField ConfigTM8Textfield;
    private javax.swing.JTextField ConfigTM9Textfield;
    private javax.swing.JLabel ConfigTextModuleLabel;
    private javax.swing.JPanel ConfigTextbausteineLRPanel;
    private javax.swing.JPanel ConfigTextbausteineLeftPanel;
    private javax.swing.JPanel ConfigTextbausteinePanel;
    private javax.swing.JCheckBox ConfigTimestampsActiveCheckbox;
    private javax.swing.JCheckBox ConfigTimestampsBeginningCheckbox;
    private javax.swing.JCheckBox ConfigTimestampsEndingCheckbox;
    private javax.swing.JLabel ConfigTimestampsLabel;
    private javax.swing.JCheckBox ConfigTooltipCheckbox;
    private javax.swing.JCheckBox ConfigUseFXPLayerCheckbox;
    private javax.swing.JScrollPane ConfigUseFXPlayerScrollpane;
    private javax.swing.JTextArea ConfigUseFXPlayerTextArea;
    private javax.swing.JComboBox ConfigWindBackCombobox;
    public static javax.swing.JTextField ConfigWindBackTextfield;
    private javax.swing.JPanel configTextbausteineRightPanel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
