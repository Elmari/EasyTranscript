/*
 * Copyright (C) 2014 e-werkzeug <administrator@e-werkzeug.eu>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package de.ewerkzeug.easytranscript.gui.components;

import static de.ewerkzeug.easytranscript.core.Easytranscript.formate;
import de.ewerkzeug.easytranscript.core.ErrorReport;
import de.ewerkzeug.easytranscript.core.Variables;
import static de.ewerkzeug.easytranscript.core.Variables.PPtransNameWarning1;
import static de.ewerkzeug.easytranscript.core.Variables.currentLocale;
import static de.ewerkzeug.easytranscript.core.Variables.errors;
import static de.ewerkzeug.easytranscript.core.Variables.logger;
import static de.ewerkzeug.easytranscript.core.Variables.messages;
import static de.ewerkzeug.easytranscript.core.Variables.projectCorrupt;
import de.ewerkzeug.easytranscript.IO.data.TranscriptHandler;
import static de.ewerkzeug.easytranscript.IO.data.TranscriptHandler.transConf;
import static de.ewerkzeug.easytranscript.IO.data.TranscriptHandler.TransConfTmp;
import static de.ewerkzeug.easytranscript.IO.data.TranscriptHandler.transcriptPath;
import de.ewerkzeug.easytranscript.tools.Tools;
import static de.ewerkzeug.easytranscript.tools.Tools.isStringSafe;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.logging.Level;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.FileUtils;
import uk.co.caprica.vlcj.version.LibVlcVersion;
import uk.co.caprica.vlcj.version.Version;

/**
 *
 * @author e-werkzeug <administrator@e-werkzeug.eu>
 */
public class ChangeTranscriptFrame extends javax.swing.JFrame {

    /**
     * Creates new form ChangeProjectFrame
     */
    public ChangeTranscriptFrame() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CPtransButtongroup = new javax.swing.ButtonGroup();
        CPtransPanel = new javax.swing.JPanel();
        CPtransCreateRadiobutton = new javax.swing.JRadioButton();
        CPtransCreateTextfield = new javax.swing.JTextField();
        CPtransReadRadiobutton = new javax.swing.JRadioButton();
        CPtransReadTextfield = new javax.swing.JTextField();
        CPtransReadButton = new javax.swing.JButton();
        CPtransCreateLabel = new javax.swing.JLabel();
        CPtransWarning2Label = new javax.swing.JLabel();
        CPtransCopyCheckbox = new javax.swing.JCheckBox();
        CPtransTitleLabel = new javax.swing.JLabel();
        CPtransWarning1Label = new javax.swing.JLabel();
        CPHelpButton = new javax.swing.JButton();
        CPmediumPanel = new javax.swing.JPanel();
        CPmediumPathTextfield = new javax.swing.JTextField();
        CPmediumChooseButton = new javax.swing.JButton();
        CPmediumTitleLabel = new javax.swing.JLabel();
        CPmediumCopyCheckbox = new javax.swing.JCheckBox();
        CPBottomPanel = new javax.swing.JPanel();
        CPsaveButton = new javax.swing.JButton();
        CPcancelButton = new javax.swing.JButton();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/ewerkzeug/easytranscript/core/bundles/Bundle"); // NOI18N
        setTitle(bundle.getString("Easytranscript.CPtransTitleLabel.text")); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        CPtransButtongroup.add(CPtransCreateRadiobutton);
        CPtransCreateRadiobutton.setText(bundle.getString("Easytranscript.CPtransCreateRadiobutton.text")); // NOI18N
        CPtransCreateRadiobutton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CPtransCreateRadiobuttonStateChanged(evt);
            }
        });

        CPtransCreateTextfield.setEditable(false);

        CPtransButtongroup.add(CPtransReadRadiobutton);
        CPtransReadRadiobutton.setSelected(true);
        CPtransReadRadiobutton.setText(bundle.getString("Easytranscript.CPtransReadRadiobutton.text")); // NOI18N
        CPtransReadRadiobutton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CPtransReadRadiobuttonStateChanged(evt);
            }
        });

        CPtransReadTextfield.setEditable(false);

        CPtransReadButton.setText(bundle.getString("Easytranscript.CPtransReadButton.text")); // NOI18N
        CPtransReadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPtransReadButtonActionPerformed(evt);
            }
        });

        CPtransCreateLabel.setText(bundle.getString("Easytranscript.CPtransCreateLabel.text")); // NOI18N

        CPtransWarning2Label.setForeground(new java.awt.Color(255, 0, 0));

        CPtransCopyCheckbox.setText(bundle.getString("Easytranscript.CPtransCopyCheckbox.text")); // NOI18N
        CPtransCopyCheckbox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CPtransCopyCheckboxMouseClicked(evt);
            }
        });

        CPtransTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 26)); // NOI18N
        CPtransTitleLabel.setText(bundle.getString("Easytranscript.CPtransTitleLabel.text")); // NOI18N

        CPtransWarning1Label.setForeground(new java.awt.Color(255, 0, 0));

        CPHelpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/ewerkzeug/easytranscript/core/images/help-hint.png"))); // NOI18N
        CPHelpButton.setToolTipText(bundle.getString("Easytranscript.MainhelpMenuitem.text")); // NOI18N
        CPHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPHelpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CPtransPanelLayout = new javax.swing.GroupLayout(CPtransPanel);
        CPtransPanel.setLayout(CPtransPanelLayout);
        CPtransPanelLayout.setHorizontalGroup(
            CPtransPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CPtransPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CPtransPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CPtransPanelLayout.createSequentialGroup()
                        .addComponent(CPtransTitleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CPHelpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CPtransPanelLayout.createSequentialGroup()
                        .addGroup(CPtransPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CPtransReadRadiobutton)
                            .addComponent(CPtransCreateRadiobutton)
                            .addGroup(CPtransPanelLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(CPtransPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(CPtransPanelLayout.createSequentialGroup()
                                        .addComponent(CPtransReadTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CPtransReadButton))
                                    .addGroup(CPtransPanelLayout.createSequentialGroup()
                                        .addComponent(CPtransWarning2Label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(CPtransCopyCheckbox))
                                    .addGroup(CPtransPanelLayout.createSequentialGroup()
                                        .addComponent(CPtransCreateTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CPtransCreateLabel))
                                    .addComponent(CPtransWarning1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        CPtransPanelLayout.setVerticalGroup(
            CPtransPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CPtransPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CPtransPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CPtransTitleLabel)
                    .addComponent(CPHelpButton))
                .addGap(34, 34, 34)
                .addComponent(CPtransCreateRadiobutton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CPtransPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CPtransCreateTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CPtransCreateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CPtransWarning1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(CPtransReadRadiobutton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CPtransPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CPtransReadTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CPtransReadButton))
                .addGroup(CPtransPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CPtransPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(CPtransWarning2Label))
                    .addGroup(CPtransPanelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(CPtransCopyCheckbox)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        CPtransCreateTextfield.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                updateTranscriptNew();
            }

            public void removeUpdate(DocumentEvent e) {
                updateTranscriptNew();
            }
            public void insertUpdate(DocumentEvent e) {
                updateTranscriptNew();
            }

        });
        CPtransReadTextfield.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                updateTranscriptPathChange();
            }
            public void removeUpdate(DocumentEvent e) {
                updateTranscriptPathChange();
            }
            public void insertUpdate(DocumentEvent e) {
                updateTranscriptPathChange();
            }

        });

        CPmediumPanel.setMinimumSize(new java.awt.Dimension(775, 350));

        CPmediumChooseButton.setText(bundle.getString("Easytranscript.CPmediumChooseButton.text")); // NOI18N
        CPmediumChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPmediumChooseButtonActionPerformed(evt);
            }
        });

        CPmediumTitleLabel.setText(bundle.getString("Easytranscript.CPmediumTitleLabel.text")); // NOI18N

        CPmediumCopyCheckbox.setText(bundle.getString("Easytranscript.CPmediumCopyCheckbox.text")); // NOI18N
        CPmediumCopyCheckbox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CPmediumCopyCheckboxMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout CPmediumPanelLayout = new javax.swing.GroupLayout(CPmediumPanel);
        CPmediumPanel.setLayout(CPmediumPanelLayout);
        CPmediumPanelLayout.setHorizontalGroup(
            CPmediumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CPmediumPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CPmediumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CPmediumPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(CPmediumCopyCheckbox))
                    .addGroup(CPmediumPanelLayout.createSequentialGroup()
                        .addComponent(CPmediumPathTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CPmediumChooseButton))
                    .addComponent(CPmediumTitleLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        CPmediumPanelLayout.setVerticalGroup(
            CPmediumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CPmediumPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CPmediumTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(CPmediumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CPmediumPathTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CPmediumChooseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CPmediumCopyCheckbox)
                .addContainerGap())
        );

        CPmediumPathTextfield.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {

            }
            public void removeUpdate(DocumentEvent e) {
                CPmediumCopyCheckbox.setEnabled(!CPmediumPathTextfield.getText().contains("youtube.com/"));

                updateMediaPathChange();
            }
            public void insertUpdate(DocumentEvent e) {

                CPmediumCopyCheckbox.setEnabled(!CPmediumPathTextfield.getText().contains("youtube.com/"));

                updateMediaPathChange();
            }

        });

        CPsaveButton.setText(bundle.getString("Easytranscript.CPsaveButton.text")); // NOI18N
        CPsaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPsaveButtonActionPerformed(evt);
            }
        });
        CPBottomPanel.add(CPsaveButton);

        CPcancelButton.setText(bundle.getString("Easytranscript.CPcancelButton.text")); // NOI18N
        CPcancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPcancelButtonActionPerformed(evt);
            }
        });
        CPBottomPanel.add(CPcancelButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CPBottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(CPtransPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CPmediumPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CPtransPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CPmediumPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CPBottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CPtransCreateRadiobuttonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CPtransCreateRadiobuttonStateChanged
        if (CPtransCreateRadiobutton.isSelected()) {

            CPtransReadButton.setEnabled(false);
            CPtransCreateTextfield.setEditable(true);

            CPtransCopyCheckbox.setEnabled(false);

        } else {

            CPtransCreateTextfield.setEditable(false);
            CPtransReadButton.setEnabled(true);

            CPtransCopyCheckbox.setEnabled(true);

        }

    }//GEN-LAST:event_CPtransCreateRadiobuttonStateChanged

    private void CPtransReadRadiobuttonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CPtransReadRadiobuttonStateChanged

        if (CPtransReadRadiobutton.isSelected()) {
            CPtransCreateRadiobutton.setSelected(false);
            CPtransReadButton.setEnabled(true);
            CPtransCreateTextfield.setEditable(false);

        } else {
            CPtransCreateRadiobutton.setSelected(true);
            CPtransReadRadiobutton.setSelected(false);
            CPtransCreateTextfield.setEditable(true);
            CPtransReadButton.setEnabled(false);

        }
    }//GEN-LAST:event_CPtransReadRadiobuttonStateChanged

    private void CPtransReadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPtransReadButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new FileNameExtensionFilter(messages.getString("rtfFiletype"), "rtf"));
        int ruckgabe = fileChooser.showOpenDialog(null);
        fileChooser.getSelectedFile();
        if (ruckgabe == JFileChooser.CANCEL_OPTION) {

            return;
        }

        CPtransReadTextfield.setText(((File) fileChooser.getSelectedFile()).getAbsolutePath());
    }//GEN-LAST:event_CPtransReadButtonActionPerformed

    private void CPtransCopyCheckboxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CPtransCopyCheckboxMouseClicked

        if (CPtransCopyCheckbox.isSelected()) {
            String path = CPtransReadTextfield.getText();
            String name = path.substring(path.lastIndexOf(System.getProperty("file.separator")));

            if (new File(transcriptPath.substring(0, transcriptPath.lastIndexOf(".")) + "_Data" + System.getProperty("file.separator") + name).exists()) {
                int ruckgabe = JOptionPane.showConfirmDialog(null, messages.getString("WarningOverwrite2"), messages.getString("WarningOverwrite2Text"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (ruckgabe == JOptionPane.YES_OPTION) {
                    CPtransCopyCheckbox.setSelected(true);
                } else {
                    CPtransCopyCheckbox.setSelected(false);
                }
            }
        }
    }//GEN-LAST:event_CPtransCopyCheckboxMouseClicked

    private void CPmediumChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPmediumChooseButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter(messages.getString("FileFormats") + " " + Arrays.toString(formate), formate);

        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        for (String s : formate) {
            fileChooser.addChoosableFileFilter(new FileNameExtensionFilter(s, s));
        }
        fileChooser.setFileFilter(filter);

        int ruckgabe = fileChooser.showOpenDialog(null);
        fileChooser.getSelectedFile();
        if (ruckgabe == JFileChooser.CANCEL_OPTION) {

            return;
        }

        //  mediaPath = ((File) jFileChooser1.getSelectedFile()).getAbsolutePath();
        CPmediumPathTextfield.setText(((File) fileChooser.getSelectedFile()).getAbsolutePath());
    }//GEN-LAST:event_CPmediumChooseButtonActionPerformed

    private void CPmediumCopyCheckboxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CPmediumCopyCheckboxMouseClicked
        if (CPmediumCopyCheckbox.isSelected()) {
            String path = CPmediumPathTextfield.getText();
            String name = path.substring(path.lastIndexOf(System.getProperty("file.separator")));

            if (new File(transcriptPath.substring(0, transcriptPath.lastIndexOf(".")) + "_Data" + System.getProperty("file.separator") + name).exists()) {
                int ruckgabe = JOptionPane.showConfirmDialog(null, messages.getString("WarningOverwrite2Title"), messages.getString("WarningOverwrite2"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (ruckgabe == JOptionPane.YES_OPTION) {
                    CPmediumCopyCheckbox.setSelected(true);
                } else {
                    CPmediumCopyCheckbox.setSelected(false);
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_CPmediumCopyCheckboxMouseClicked

    private void CPsaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPsaveButtonActionPerformed

         
        if (CPmediumCopyCheckbox.isEnabled()==false){
            if (System.getProperty("os.arch").contains("64")){
                if (!Variables.useFXPlayer){
                if (!LibVlcVersion.getVersion().atLeast(new Version("2.2.0"))){
                    JOptionPane.showMessageDialog(null, messages.getString("YtVLCatLeast22"), messages.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    return;
                }
                }
            }
        }
        
        if (PPtransNameWarning1 == false) {
            if (CPtransCreateRadiobutton.isSelected()) {
                if (CPtransCreateTextfield.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, messages.getString("ErrorEmptyName"), messages.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    return;
                }

                String name = CPtransCreateTextfield.getText();
                if (!name.endsWith(".rtf")) {
                    name = name + ".rtf";
                }
                if (new File(transcriptPath.substring(0, transcriptPath.lastIndexOf(".")) + "_Data" + System.getProperty("file.separator") + name).exists()) {
                    int ruckgabe = JOptionPane.showConfirmDialog(null, messages.getString("TranscriptAlExist"), messages.getString("WarningOverwrite2Title"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (ruckgabe != JOptionPane.YES_OPTION) {
                        return;
                    }
                }

            } else {
                if (CPtransReadTextfield.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, messages.getString("TranscriptPathEmpty"), messages.getString("Error"), JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            updateTranscriptNew();
            updateTranscriptPathChange();
            updateMediaPathChange();

            if (CPtransCreateRadiobutton.isSelected()) {
                TransConfTmp.setProperty("transcriptPath", "");

            } else {
                TransConfTmp.setProperty("transcriptName", "");
            }

            if (CPtransReadRadiobutton.isSelected()) {
                TransConfTmp.setProperty("transcriptName", "");

            } else {

                TransConfTmp.setProperty("transcriptPath", "");

            }

            changeProject();
            projectCorrupt = 0;

            TranscriptHandler.read(transcriptPath);
            setVisible(false);

        } else {
            JOptionPane.showMessageDialog(null, messages.getString("ErrorUnallowedChars"), messages.getString("Error"), JOptionPane.ERROR_MESSAGE);
        }

        if (!new File(CPmediumPathTextfield.getText()).exists()) {
            if (!CPmediumPathTextfield.getText().contains("youtube.com/")) {
                JOptionPane.showMessageDialog(null, messages.getString("MediaFileNotExists2"), messages.getString("Error"), JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (!new File(CPtransReadTextfield.getText()).exists()) {
            JOptionPane.showMessageDialog(null, messages.getString("TranscriptFileNotExists2"), messages.getString("Error"), JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_CPsaveButtonActionPerformed

    private void CPcancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPcancelButtonActionPerformed

        if (projectCorrupt > 0) {
            int ruckgabe = JOptionPane.showConfirmDialog(null, messages.getString("WarningCheckProjProperties"), messages.getString("Error"), JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (ruckgabe != JOptionPane.YES_OPTION) {
            } else {
                TransConfTmp.clear();
                setVisible(false);
                TranscriptHandler.close();
                setTitle("easytranscript");
            }
        } else {
            TransConfTmp.clear();
            setVisible(false);
        }

    }//GEN-LAST:event_CPcancelButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        CPcancelButtonActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    private void CPHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPHelpButtonActionPerformed

        new Tools().browse("http://e-werkzeug.eu/software/easytranscript/versions/" + Variables.VERSION.getMajorVersion() + "." + Variables.VERSION.getMinorVersion() + "/help/" + currentLocale.getLanguage() + "/");
    }//GEN-LAST:event_CPHelpButtonActionPerformed

    //CHANGE-PROJECT
    //==============
    /**
     * Setzt die Komponentwerte des Projekteinstellungen bearbeiten Fensters auf
     * default.
     */
    public void toggleChangeProjProp() {
        setVisible(true);

        CPtransCreateTextfield.setText("");
        CPtransCreateRadiobutton.setSelected(false);
        CPtransReadRadiobutton.setSelected(true);
        CPtransCopyCheckbox.setSelected(false);
        CPmediumCopyCheckbox.setSelected(false);

        if (isVisible()) {

            TransConfTmp.putAll(transConf);

            String path = TransConfTmp.getProperty("transcriptPath");
            String name = TransConfTmp.getProperty("transcriptName");

            if (path == null || path.equals("")) {

                path = transcriptPath.substring(0, transcriptPath.lastIndexOf(".")) + "_Data" + System.getProperty("file.separator") + name + ".rtf";
            }

            CPtransReadTextfield.setText(path);
            String mediaP = TransConfTmp.getProperty("mediaPath");
            String mediaN = TransConfTmp.getProperty("mediaName");

            if (mediaP == null || mediaP.equals("")) {
                mediaP = transcriptPath.substring(0, transcriptPath.lastIndexOf(".")) + "_Data" + System.getProperty("file.separator") + mediaN;

            }
            CPmediumPathTextfield.setText(mediaP);

            if (CPtransCreateRadiobutton.isSelected()) {
                CPtransCopyCheckbox.setEnabled(false);
            } else {
                CPtransCopyCheckbox.setEnabled(true);
            }

            if (projectCorrupt == 1) {
                CPtransCopyCheckbox.setEnabled(false);
            }
            if (projectCorrupt == 3) {
                CPmediumCopyCheckbox.setEnabled(false);
            }
            if (projectCorrupt == 2) {
                CPtransCopyCheckbox.setEnabled(false);
                CPmediumCopyCheckbox.setEnabled(false);
            }

        }

    }

    /**
     * Prüft, ob PPtranskriptCreateTf1 unerlaubte Zeichen enthält.
     *
     * @TODO: Array mit unerlaubten Zeichen erstellen, sowie eine universelle
     * Methode, die Strings auf Fehler überprüft.
     */
    private void updateTranscriptNew() {
        boolean check = isStringSafe(CPtransCreateTextfield.getText());
        if (check) {
            CPtransWarning1Label.setText("");
            TransConfTmp.setProperty("transcriptName", CPtransCreateTextfield.getText());
            PPtransNameWarning1 = false;
        } else {
            CPtransWarning1Label.setText("Warnung: Der Name enthält ungültige Zeichen");
            PPtransNameWarning1 = true;
        }

    }

    /**
     * updated den Transkriptpfad bei Änderung.
     */
    public void updateTranscriptPathChange() {
        if (!CPtransReadTextfield.getText().equals("")) {
            String pathT = transcriptPath.substring(0, transcriptPath.lastIndexOf(".")) + "_Data";

            if (pathT.equals(CPtransReadTextfield.getText().substring(0, CPtransReadTextfield.getText().lastIndexOf(System.getProperty("file.separator"))))) {
                CPtransCopyCheckbox.setEnabled(false);
            } else {
                CPtransCopyCheckbox.setEnabled(true);
            }

            TransConfTmp.setProperty("transcriptPath", CPtransReadTextfield.getText());

        } else {
            TransConfTmp.setProperty("transcriptPath", "");
        }
    }

    /**
     * updated den Medienpfad bei Änderung.
     */
    public void updateMediaPathChange() {
        if (!CPmediumPathTextfield.getText().equals("")) {

            String pathT = transcriptPath.substring(0, transcriptPath.lastIndexOf(".")) + "_Data";

            if (!CPmediumPathTextfield.getText().startsWith("http://www.youtube.com")) {
                if (pathT.equals(CPmediumPathTextfield.getText().substring(0, CPmediumPathTextfield.getText().lastIndexOf(System.getProperty("file.separator"))))) {
                    CPmediumCopyCheckbox.setEnabled(false);
                } else {
                    CPmediumCopyCheckbox.setEnabled(true);
                }
            } else {
                CPmediumCopyCheckbox.setEnabled(false);
            }

            TransConfTmp.setProperty("mediaPath", CPmediumPathTextfield.getText());
        } else {
            TransConfTmp.setProperty("mediaPath", "");
        }
    }

    /**
     * Wendet Projektänderungen an.
     */
    private void changeProject() {

        transConf.putAll(TransConfTmp);

        TransConfTmp.clear();

        if (CPtransCreateRadiobutton.isSelected()) {
            FileWriter fstream = null;
            try {
                fstream = new FileWriter(transcriptPath.substring(0, transcriptPath.lastIndexOf(".")) + "_Data/" + CPtransCreateTextfield.getText() + ".rtf");
                BufferedWriter out = new BufferedWriter(fstream);
                out.write("");

                fstream.close();
                transConf.setProperty("transcriptName", CPtransCreateTextfield.getText());
            } catch (IOException ex) {
                logger.log(Level.SEVERE, new ErrorReport().show(errors.getString("SpeichernNeuesTranskript")), ex);

            } finally {
                try {
                    fstream.close();
                } catch (IOException ex) {
                    logger.log(Level.WARNING, "Der Stream konnte nicht geschlossen werden.", ex);

                }
            }
        } else {
            // RTF kopieren

            if (CPtransCopyCheckbox.isSelected() == true) {

                File file = new File(transConf.getProperty("transcriptPath"));

                try {

                    File dest = new File(transcriptPath.substring(0, transcriptPath.lastIndexOf(".")) + "_Data" + System.getProperty("file.separator"));

                    FileUtils.copyFileToDirectory(file, dest);

                } catch (IOException ex) {
                    //    logger.log(Level.SEVERE, new ErrorReport().show(errors.getString("FehlerKopierenTranskript")), ex);
                    logger.log(Level.WARNING, ex.getLocalizedMessage(), ex);
                }
            }

        }

        // Mediendatei kopieren
        if (CPmediumCopyCheckbox.isSelected() == true) {
            File file = new File(transConf.getProperty("mediaPath"));
            try {

                File dest = new File(transcriptPath.substring(0, transcriptPath.lastIndexOf(".")) + "_Data" + System.getProperty("file.separator"));

                FileUtils.copyFileToDirectory(file, dest);

            } catch (IOException ex) {
                logger.log(Level.SEVERE, new ErrorReport().show(errors.getString("FailedCopyingMedia")), ex);
            }
        }

        if (!CPtransCreateRadiobutton.isSelected()) {
            if (CPtransCopyCheckbox.isSelected() == true) {
                transConf.setProperty("transcriptName", "");
                transConf.setProperty("transcriptPath", "");
                String tmp = CPtransReadTextfield.getText();
                transConf.setProperty("transcriptName", tmp.substring(tmp.lastIndexOf(System.getProperty("file.separator")) + 1, tmp.lastIndexOf(".")));
            }
        }
//

        if (CPmediumCopyCheckbox.isSelected() == true) {
            transConf.setProperty("mediaPath", "");
            transConf.setProperty("mediaName", "");
            String tmp = CPmediumPathTextfield.getText();
            transConf.setProperty("mediaName", tmp.substring(tmp.lastIndexOf(System.getProperty("file.separator")) + 1));
        }
        try {

            TranscriptHandler.writeProjConf(transcriptPath);
        } catch (FileNotFoundException ex) {
            logger.log(Level.SEVERE, new ErrorReport().show(errors.getString("SavingConfig2")), ex);

        } catch (IOException ex) {
            logger.log(Level.SEVERE, new ErrorReport().show(errors.getString("SavingConfig2")), ex);
        }

        transConf.clear();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CPBottomPanel;
    private javax.swing.JButton CPHelpButton;
    private javax.swing.JButton CPcancelButton;
    private javax.swing.JButton CPmediumChooseButton;
    public static javax.swing.JCheckBox CPmediumCopyCheckbox;
    private javax.swing.JPanel CPmediumPanel;
    public static javax.swing.JTextField CPmediumPathTextfield;
    private javax.swing.JLabel CPmediumTitleLabel;
    private javax.swing.JButton CPsaveButton;
    private javax.swing.ButtonGroup CPtransButtongroup;
    public static javax.swing.JCheckBox CPtransCopyCheckbox;
    private javax.swing.JLabel CPtransCreateLabel;
    public static javax.swing.JRadioButton CPtransCreateRadiobutton;
    public static javax.swing.JTextField CPtransCreateTextfield;
    private javax.swing.JPanel CPtransPanel;
    private javax.swing.JButton CPtransReadButton;
    public static javax.swing.JRadioButton CPtransReadRadiobutton;
    public static javax.swing.JTextField CPtransReadTextfield;
    private javax.swing.JLabel CPtransTitleLabel;
    private javax.swing.JLabel CPtransWarning1Label;
    private javax.swing.JLabel CPtransWarning2Label;
    // End of variables declaration//GEN-END:variables
}
